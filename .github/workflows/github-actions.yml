on: push
jobs:
  build-linux:
    runs-on: ubuntu-18.04
    env:
      MYSQL_TEST_USER: root
      MYSQL_TEST_PASS: root
      MYSQL_TEST_ADDR: 127.0.0.1:3306
      MYSQL_TEST_E2E_DB: e2e_test_db
      GCS_BUCKET: grr-github-actions-test
    steps:
      - uses: actions/checkout@v2
      - name: Set up MySQL
        run: |
          sudo /etc/init.d/mysql start
          mysql -e 'CREATE DATABASE ${{ env.MYSQL_TEST_E2E_DB }};' -u${{ env.MYSQL_TEST_USER }} -p${{ env.MYSQL_TEST_PASS }}
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.15'
      - name: Set up Go
        run: |
          go get -u golang.org/x/lint/golint
          go get -u -v github.com/golang/protobuf/protoc-gen-go@v1.4.2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('*_python/**') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Set up Python
        run: |
          pip install -e ./fleetspeak_python
          pip install -e ./frr_python
      - name: Lint
        # We want to address all golint warnings, except for
        # https://github.com/golang/go/wiki/CodeReviewComments#doc-comments
        # TODO(mbushkov): make golint and go vet checks actionable.
        run: |
          golint ./... | grep -v 'should have comment or be unexported' || true
          go vet ./... || true
      - name: Check generated protos
        run: |
          fleetspeak/generate_go_py_protos.sh
          if [[ "$(git status --porcelain | grep .pb.go)" != "" ]]; then
            echo "At least one generated proto file is not in sync with the committed generated proto files."
            echo "Please run \`PATH=~/go/bin:\$PATH fleetspeak/generate_go_py_protos.sh\` with protoc-gen-go version 1.4.2."
            echo "pip packages:"
            pip freeze
            exit 1;
          fi;
          echo "git status is clean; generated protos are consistent"
      - name: Build
        run: |
          fleetspeak/build.sh
      - name: Test
        run: |
          fleetspeak/test.sh
      - name: Check DEB installation
        # Install the built package and check that the fleetspeak-config program
        # doesn't error out.
        run: |
          cd fleetspeak
          ./build-pkgs.sh
          sudo ./test-package.sh ./fleetspeak-server_$(cat ../VERSION)_amd64.deb ./fleetspeak-client_$(cat ../VERSION)_amd64.deb
      - name: Build installers
        run: |
          sudo apt install debhelper devscripts dh-systemd fakeroot libparse-debcontrol-perl
          cd fleetspeak
          BUILD_TIMESTAMP=$(git show -s --format=%ci ${GITHUB_SHA} | sed -e "s/[ :\\+]/_/g")
          DEPLOY_PATH=$GITHUB_WORKSPACE/deploy/${BUILD_TIMESTAMP}_${GITHUB_SHA}/
          mkdir -p $DEPLOY_PATH
          cp ./fleetspeak-client_$(cat ../VERSION)_amd64.deb $DEPLOY_PATH
          cp ./fleetspeak-server_$(cat ../VERSION)_amd64.deb $DEPLOY_PATH
          # pypi doesn't support linux_x86_64, which is the plafrom name targeted by default.
          # We generate manylinux1_x86_64 manylinux2010_x86_64 packages, which are supported.
          # Create client wheel
          dpkg --extract ./fleetspeak-client_$(cat ../VERSION)_amd64.deb client-package-root
          python client-wheel/setup.py --package-root=client-package-root --version=$(cat ../VERSION) -- bdist_wheel --platform-name=manylinux1_x86_64
          python client-wheel/setup.py --package-root=client-package-root --version=$(cat ../VERSION) -- bdist_wheel --platform-name=manylinux2010_x86_64
          # Create server wheel
          dpkg --extract ./fleetspeak-server_$(cat ../VERSION)_amd64.deb server-package-root
          python server-wheel/setup.py --package-root=server-package-root --version=$(cat ../VERSION) -- bdist_wheel --platform-name=manylinux1_x86_64
          python server-wheel/setup.py --package-root=server-package-root --version=$(cat ../VERSION) -- bdist_wheel --platform-name=manylinux2010_x86_64
          # Copy wheels
          cp dist/*.whl $DEPLOY_PATH
      - name: Upload installers to GCS
        uses: google-github-actions/upload-cloud-storage@main
        with:
          credentials: ${{ secrets.GCP_SA_KEY }}
          path: deploy/
          destination: ${{ env.GCS_BUCKET }}

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.15'
      - name: Install dependencies
        run: |
          powershell Install-WindowsFeature Net-Framework-Core
      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Build installers
        run: |
          go build -v -x -o fleetspeak-client.exe ./fleetspeak/src/client/client/client.go
          cd fleetspeak/client-win
          powershell -ExecutionPolicy Bypass -File ./build.ps1
          cd ../..
          mkdir -p $GITHUB_WORKSPACE/deploy/
          cp ${TMP}/fleetspeak-build-*/fleetspeak-pkg/fleetspeak-client-*.msi $GITHUB_WORKSPACE/deploy/
          # Build client wheel
          mkdir pkg-root
          cp fleetspeak-client.exe pkg-root
          cp fleetspeak/client-win/fleetspeak_lib.wxs pkg-root
          python fleetspeak/client-wheel/setup.py --package-root pkg-root --version=$(cat VERSION) bdist_wheel
          cp dist/*.whl $GITHUB_WORKSPACE/deploy/

  build-osx:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.15'
      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Build installers
        run: |
          go build -o fleetspeak-client ./fleetspeak/src/client/client/client.go
          DEPLOY_PATH=$GITHUB_WORKSPACE/deploy/
          mkdir -p $DEPLOY_PATH
          cd fleetspeak/client-mac
          ./build.sh ../../fleetspeak-client
          sudo installer -pkg ./work/fleetspeak-client-*.pkg -target / -verbose
          cd ../..
          cp ./fleetspeak/client-mac/work/fleetspeak-client-*.pkg $DEPLOY_PATH
          # Build client wheel
          python fleetspeak/client-wheel/setup.py --package-root=fleetspeak/client-mac/work/pkg_root --version=$(cat VERSION) bdist_wheel
          cp dist/*.whl $DEPLOY_PATH
