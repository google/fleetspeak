syntax = "proto3";

package fleetspeak.server;

option go_package = "github.com/google/fleetspeak/fleetspeak/src/server/proto/fleetspeak_server";

import "google/protobuf/timestamp.proto";
import "fleetspeak/src/common/proto/fleetspeak/common.proto";
import "fleetspeak/src/server/proto/fleetspeak_server/broadcasts.proto";
import "fleetspeak/src/server/proto/fleetspeak_server/resource.proto";

message CreateBroadcastRequest {
  Broadcast broadcast = 1;
  uint64 limit = 2;
}

message ListActiveBroadcastsRequest {
  // If set, only return broadcasts with the given service_name.
  string service_name = 1;
}

message ListActiveBroadcastsResponse {
  repeated Broadcast broadcasts = 1;
}

message ListClientsRequest {
  // If non-empty, restricts results to the listed client_ids. If empty, all
  // clients known to the system will be listed.
  repeated bytes client_ids = 1;
}

message ListClientsResponse {
  repeated Client clients = 1;
}

message StreamClientIdsRequest {
}

message StreamClientIdsResponse {
  bytes client_id = 1;
}

message Client {
  // Next unused tag: 8

  bytes client_id = 1;
  repeated Label labels = 2;
  google.protobuf.Timestamp last_contact_time = 3;
  string last_contact_address = 4;
  string last_contact_streaming_to = 7;
  google.protobuf.Timestamp last_clock = 5;
  bool blacklisted = 6;
}

message GetMessageStatusRequest {
  bytes message_id = 1;
}

message DeletePendingMessagesRequest {
  repeated bytes client_ids = 1;
}

message GetPendingMessagesRequest {
  repeated bytes client_ids = 1;
  uint64 offset = 2;
  uint64 limit = 3;
  bool want_data = 4;
}

message GetPendingMessagesResponse {
  repeated fleetspeak.Message messages = 1;
}

message GetPendingMessageCountRequest {
  repeated bytes client_ids = 1;
}

message GetPendingMessageCountResponse {
  uint64 count = 1;
}

message GetMessageStatusResponse {
  google.protobuf.Timestamp creation_time = 1;
  MessageResult result = 2;
}

message StoreFileRequest {
  string service_name = 1;
  string file_name = 2;
  bytes data = 3;
}

message ListClientContactsRequest {
  bytes client_id = 1;
}

message ListClientContactsResponse {
  repeated ClientContact contacts = 1;
}

message StreamClientContactsRequest {
  bytes client_id = 1;
}

message StreamClientContactsResponse {
  ClientContact contact = 1;
}

message ClientContact {
  fixed64 sent_nonce = 1;
  fixed64 received_nonce = 2;
  string observed_address = 3;
  google.protobuf.Timestamp timestamp = 4;
}

message BlacklistClientRequest {
  bytes client_id = 1;
}

message FetchClientResourceUsageRecordsRequest {
  bytes client_id = 1;
  google.protobuf.Timestamp start_timestamp = 3;
  google.protobuf.Timestamp end_timestamp = 4;
}

message FetchClientResourceUsageRecordsResponse {
  repeated ClientResourceUsageRecord records = 1;
}

service Admin {
  // CreateBroadcast creates a FS broadcast, potentially sending a message to
  // many machines in the fleet.
  rpc CreateBroadcast (CreateBroadcastRequest) returns (fleetspeak.EmptyMessage) {
  }

  // ListActiveBroadcasts lists the currently active FS broadcasts.
  rpc ListActiveBroadcasts (ListActiveBroadcastsRequest) returns (ListActiveBroadcastsResponse) {
  }

  // ListClients lists the currently active FS clients.
  rpc ListClients (ListClientsRequest) returns (ListClientsResponse) {
  }

  // StreamClientIds lists the currently active FS clients as a stream.
  rpc StreamClientIds (StreamClientIdsRequest) returns (stream StreamClientIdsResponse) {
  }

  // ListClientContacts lists the contact history for a client.
  rpc ListClientContacts (ListClientContactsRequest) returns (ListClientContactsResponse) {
  }

  // StreamClientContacts lists the contact history for a client as a stream.
  rpc StreamClientContacts (StreamClientContactsRequest) returns (stream StreamClientContactsResponse) {
  }

  // GetMessageStatus retrieves the current status of a message.
  rpc GetMessageStatus (GetMessageStatusRequest) returns (GetMessageStatusResponse) {
  }

  // InsertMessage inserts a message into the Fleetspeak system to be processed
  // by the server or delivered to a client.
  // TODO: Have this method return the message that is written to the
  // datastore (or at least the id).
  rpc InsertMessage (fleetspeak.Message) returns (fleetspeak.EmptyMessage) {
  }

  // DeletePendingMessages clears message queues for given clients.
  rpc DeletePendingMessages (DeletePendingMessagesRequest) returns (fleetspeak.EmptyMessage) {
  }

  // Returns the pending messages for given clients.
  rpc GetPendingMessages (GetPendingMessagesRequest) returns (GetPendingMessagesResponse) {
  }

  // Returns the number of pending messages for the given clients.
  rpc GetPendingMessageCount (GetPendingMessageCountRequest) returns (GetPendingMessageCountResponse) {
  }

  // StoreFile inserts a file into the Fleetspeak system.
  rpc StoreFile (StoreFileRequest) returns (fleetspeak.EmptyMessage) {
  }

  // KeepAlive does as little as possible.
  rpc KeepAlive (fleetspeak.EmptyMessage) returns (fleetspeak.EmptyMessage) {
  }

  // BlacklistClient marks a client_id as invalid, forcing all Fleetspeak
  // clients using it to rekey.
  rpc BlacklistClient (BlacklistClientRequest) returns (fleetspeak.EmptyMessage) {
  }

  // FetchClientResourceUsageRecords returns all resource usage records for a
  // single client with a given limit on the number of records.
  rpc FetchClientResourceUsageRecords (FetchClientResourceUsageRecordsRequest) returns (FetchClientResourceUsageRecordsResponse) {
  }
}
