// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fleetspeak/src/server/grpcservice/proto/fleetspeak_grpcservice/grpcservice.proto

package fleetspeak_grpcservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import fleetspeak "github.com/google/fleetspeak/fleetspeak/src/common/proto/fleetspeak"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Config struct {
	Target               string   `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Insecure             bool     `protobuf:"varint,2,opt,name=insecure,proto3" json:"insecure,omitempty"`
	CertFile             string   `protobuf:"bytes,3,opt,name=cert_file,json=certFile,proto3" json:"cert_file,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_grpcservice_e2ed02c907788853, []int{0}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (dst *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(dst, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Config) GetInsecure() bool {
	if m != nil {
		return m.Insecure
	}
	return false
}

func (m *Config) GetCertFile() string {
	if m != nil {
		return m.CertFile
	}
	return ""
}

func init() {
	proto.RegisterType((*Config)(nil), "fleetspeak.grpcservice.Config")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProcessorClient is the client API for Processor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProcessorClient interface {
	// Process accepts message and processes it.
	Process(ctx context.Context, in *fleetspeak.Message, opts ...grpc.CallOption) (*fleetspeak.EmptyMessage, error)
}

type processorClient struct {
	cc *grpc.ClientConn
}

func NewProcessorClient(cc *grpc.ClientConn) ProcessorClient {
	return &processorClient{cc}
}

func (c *processorClient) Process(ctx context.Context, in *fleetspeak.Message, opts ...grpc.CallOption) (*fleetspeak.EmptyMessage, error) {
	out := new(fleetspeak.EmptyMessage)
	err := c.cc.Invoke(ctx, "/fleetspeak.grpcservice.Processor/Process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessorServer is the server API for Processor service.
type ProcessorServer interface {
	// Process accepts message and processes it.
	Process(context.Context, *fleetspeak.Message) (*fleetspeak.EmptyMessage, error)
}

func RegisterProcessorServer(s *grpc.Server, srv ProcessorServer) {
	s.RegisterService(&_Processor_serviceDesc, srv)
}

func _Processor_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fleetspeak.Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleetspeak.grpcservice.Processor/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorServer).Process(ctx, req.(*fleetspeak.Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Processor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fleetspeak.grpcservice.Processor",
	HandlerType: (*ProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _Processor_Process_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fleetspeak/src/server/grpcservice/proto/fleetspeak_grpcservice/grpcservice.proto",
}

func init() {
	proto.RegisterFile("fleetspeak/src/server/grpcservice/proto/fleetspeak_grpcservice/grpcservice.proto", fileDescriptor_grpcservice_e2ed02c907788853)
}

var fileDescriptor_grpcservice_e2ed02c907788853 = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x4f, 0xcf, 0x4b, 0x80, 0x30,
	0x14, 0xce, 0x02, 0xd3, 0x1d, 0x17, 0xc8, 0xb0, 0x8b, 0x78, 0xf2, 0xe4, 0x20, 0x6f, 0x5d, 0xa3,
	0x3a, 0x05, 0xe2, 0xad, 0x93, 0xd8, 0x78, 0x8e, 0x91, 0xba, 0xf1, 0xde, 0x0a, 0xfa, 0xef, 0x43,
	0x1b, 0x39, 0xea, 0xf6, 0xfd, 0x7a, 0xdf, 0x7b, 0x8f, 0xf5, 0xf3, 0x02, 0xe0, 0xc9, 0xc1, 0xf4,
	0x2e, 0x09, 0x95, 0x24, 0xc0, 0x4f, 0x40, 0xa9, 0xd1, 0xa9, 0x1d, 0x1a, 0x05, 0xd2, 0xa1, 0xf5,
	0x56, 0x9e, 0xb9, 0x31, 0x36, 0x23, 0xdc, 0x1e, 0x41, 0x5e, 0x9c, 0xc9, 0x36, 0x72, 0xcb, 0xee,
	0xcf, 0x26, 0x65, 0xd7, 0xd5, 0x6e, 0xff, 0xda, 0x83, 0xfe, 0x53, 0x56, 0xbf, 0xb2, 0xf4, 0xc1,
	0x6e, 0xb3, 0xd1, 0xbc, 0x60, 0xa9, 0x9f, 0x50, 0x83, 0x17, 0x49, 0x95, 0x34, 0xf9, 0x10, 0x18,
	0x2f, 0x59, 0x66, 0x36, 0x02, 0xf5, 0x81, 0x20, 0x2e, 0xab, 0xa4, 0xc9, 0x86, 0x5f, 0xce, 0x6f,
	0x59, 0xae, 0x00, 0xfd, 0x38, 0x9b, 0x05, 0xc4, 0xd5, 0x31, 0x96, 0xed, 0xc2, 0x93, 0x59, 0xe0,
	0xee, 0x99, 0xe5, 0x3d, 0x5a, 0x05, 0x44, 0x16, 0xf9, 0x3d, 0xbb, 0x0e, 0x84, 0xdf, 0xb4, 0xd1,
	0x03, 0x2f, 0x40, 0x34, 0x69, 0x28, 0x45, 0x2c, 0x3e, 0xae, 0xce, 0x7f, 0x05, 0xa7, 0xbe, 0x78,
	0x4b, 0x8f, 0x53, 0xbb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xa1, 0xd9, 0xfe, 0x4b, 0x01,
	0x00, 0x00,
}
