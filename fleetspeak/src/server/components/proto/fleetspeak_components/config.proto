// Copyright 2019 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package fleetspeak.components;

option go_package = "github.com/google/fleetspeak/fleetspeak/src/server/components/proto/fleetspeak_components";

message Config {
  // Mysql connection string. Required.
  //
  // https://github.com/go-sql-driver/mysql#dsn-data-source-name
  string mysql_data_source_name = 1;

  // The parameters required to stand up an https server.
  HttpsConfig https_config = 2;

  // Parameters required to stand up an admin server. Either this or
  // "https_config", or both, have to be specified.
  AdminConfig admin_config = 7;

  // Parameters required to set up a stats collector.
  StatsConfig stats_config = 8;

  // Parameters required to stand up a http health check service. Optional.
  HealthCheckConfig health_check_config = 9;

  // If set, expects connections to arrive through a load balance implementing
  // the PROXY protocol.
  //
  // https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt
  bool proxy_protocol = 3;

  // If set, only clients reporting this label will be allowed to
  // connect. Meant as a sanity check that the client and server are for the
  // same Fleetspeak installation.
  string required_label = 4;

  // If set, the bind address to listen on to receive notifications from other
  // fleetspeak servers. Optional, but strongly recommended for installations
  // involving multiple servers. e.g. ":8080", "localhost:1234".
  string notification_listen_address = 5;

  // If set, other servers will be told to use this address in order to connect
  // with this server's notification port. Has no effect when
  // notification_listen_address is unset.
  string notification_public_address = 6;

  // If set, a HTTP notifier implementation is used for sending notifications.
  // Set this if running a pure admin server (without a notification listener)
  // in a distributed setup.
  bool notification_use_http_notifier = 10;
}

message HttpsConfig {
  // The bind address to listen on for client connections, e.g. ":443" or
  // "localhost:1234". Required.
  string listen_address = 1;

  // A certificate chain which identifies the server to clients. Must lead to a
  // certificate known to the clients. x509 format. Required.
  string certificates = 2;

  // The private key used to identify the server. Must match the first entry in
  // certificates. x509 format. Required.
  string key = 3;

  // If set, disables long running (streaming) connections. This type of
  // connection causes more active connections but can reduce database load and
  // server->client communications latency.
  bool disable_streaming = 4;
}

message AdminConfig {
  // The bind address to listen on for connections, e.g. ":443" or
  // "localhost:1234". Required.
  string listen_address = 1;
}

message StatsConfig {
  // The bind address to listen on for Prometheus http metric collection in the
  // form "<host>:<port>", e.g. "localhost:2112".
  // Optional; if no address is configured, then no stats collector
  // will be used (i.e. noopStatsCollector).
  string address = 1;
}

message HealthCheckConfig {
  // The bind address to listen on for http health check probes in the
  // form "<host>:<port>", e.g. "localhost:8080".
  string listen_address = 1;
}
