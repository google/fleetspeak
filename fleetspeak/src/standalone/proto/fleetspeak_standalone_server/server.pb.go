// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fleetspeak/src/standalone/proto/fleetspeak_standalone_server/server.proto

package fleetspeak_standalone_server

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	fleetspeak_grpcservice "github.com/google/fleetspeak/fleetspeak/src/server/grpcservice/proto/fleetspeak_grpcservice"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ServiceConfig struct {
	// The name that the service will be known as. Primary use is to address
	// messages to the service. The service names 'server' and 'client' are
	// reserved.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The maximum number of simultaneous calls to the service's ProcessMessage
	// method. If unset, defaults to 100.
	MaxParallelism uint32 `protobuf:"varint,2,opt,name=max_parallelism,json=maxParallelism,proto3" json:"max_parallelism,omitempty"`
	// GRPC service configuration information.
	Config               *fleetspeak_grpcservice.Config `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ServiceConfig) Reset()         { *m = ServiceConfig{} }
func (m *ServiceConfig) String() string { return proto.CompactTextString(m) }
func (*ServiceConfig) ProtoMessage()    {}
func (*ServiceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_07faf9cf3e135aed, []int{0}
}

func (m *ServiceConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceConfig.Unmarshal(m, b)
}
func (m *ServiceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceConfig.Marshal(b, m, deterministic)
}
func (m *ServiceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceConfig.Merge(m, src)
}
func (m *ServiceConfig) XXX_Size() int {
	return xxx_messageInfo_ServiceConfig.Size(m)
}
func (m *ServiceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceConfig proto.InternalMessageInfo

func (m *ServiceConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceConfig) GetMaxParallelism() uint32 {
	if m != nil {
		return m.MaxParallelism
	}
	return 0
}

func (m *ServiceConfig) GetConfig() *fleetspeak_grpcservice.Config {
	if m != nil {
		return m.Config
	}
	return nil
}

// Describes a standalone server's configuration. Standalone server is a
// Fleetspeak server that is desgiend to have plugins talking through GRPC.
// If unset, all values default to values reasonable for a unit test or
// small installation. Larger installations may need to tune these.
type StandaloneServerConfig struct {
	// Bind address for the admin rpc server.
	AdminAddr string `protobuf:"bytes,1,opt,name=admin_addr,json=adminAddr,proto3" json:"admin_addr,omitempty"`
	// Bind address to listen for https connections from clients.
	HttpsAddr string `protobuf:"bytes,2,opt,name=https_addr,json=httpsAddr,proto3" json:"https_addr,omitempty"`
	// Path to the CA certificate file used to sign server certificates.
	CaCert string `protobuf:"bytes,3,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	// Path to the CA key.
	CaKey string `protobuf:"bytes,4,opt,name=ca_key,json=caKey,proto3" json:"ca_key,omitempty"`
	// Path to the certificate file to use to identify the server to clients.
	ServerCert string `protobuf:"bytes,5,opt,name=server_cert,json=serverCert,proto3" json:"server_cert,omitempty"`
	// Path to the key file to use to identify the server to clients.
	ServerKey string `protobuf:"bytes,6,opt,name=server_key,json=serverKey,proto3" json:"server_key,omitempty"`
	// MySQL username to use.
	MysqlUser string `protobuf:"bytes,7,opt,name=mysql_user,json=mysqlUser,proto3" json:"mysql_user,omitempty"`
	// MySQL password to use.
	MysqlPassword string `protobuf:"bytes,8,opt,name=mysql_password,json=mysqlPassword,proto3" json:"mysql_password,omitempty"`
	// MySQL database to use.
	MysqlDatabase string `protobuf:"bytes,9,opt,name=mysql_database,json=mysqlDatabase,proto3" json:"mysql_database,omitempty"`
	// MySQL address to use.
	MysqlAddr string `protobuf:"bytes,10,opt,name=mysql_addr,json=mysqlAddr,proto3" json:"mysql_addr,omitempty"`
	// The approximate time to wait between checking for new broadcasts. If unset,
	// a default of 1 minute is used.
	BroadcastPollTime *duration.Duration `protobuf:"bytes,11,opt,name=broadcast_poll_time,json=broadcastPollTime,proto3" json:"broadcast_poll_time,omitempty"`
	// The collection of services that this server should include.
	Services             []*ServiceConfig `protobuf:"bytes,12,rep,name=services,proto3" json:"services,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StandaloneServerConfig) Reset()         { *m = StandaloneServerConfig{} }
func (m *StandaloneServerConfig) String() string { return proto.CompactTextString(m) }
func (*StandaloneServerConfig) ProtoMessage()    {}
func (*StandaloneServerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_07faf9cf3e135aed, []int{1}
}

func (m *StandaloneServerConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StandaloneServerConfig.Unmarshal(m, b)
}
func (m *StandaloneServerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StandaloneServerConfig.Marshal(b, m, deterministic)
}
func (m *StandaloneServerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StandaloneServerConfig.Merge(m, src)
}
func (m *StandaloneServerConfig) XXX_Size() int {
	return xxx_messageInfo_StandaloneServerConfig.Size(m)
}
func (m *StandaloneServerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StandaloneServerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StandaloneServerConfig proto.InternalMessageInfo

func (m *StandaloneServerConfig) GetAdminAddr() string {
	if m != nil {
		return m.AdminAddr
	}
	return ""
}

func (m *StandaloneServerConfig) GetHttpsAddr() string {
	if m != nil {
		return m.HttpsAddr
	}
	return ""
}

func (m *StandaloneServerConfig) GetCaCert() string {
	if m != nil {
		return m.CaCert
	}
	return ""
}

func (m *StandaloneServerConfig) GetCaKey() string {
	if m != nil {
		return m.CaKey
	}
	return ""
}

func (m *StandaloneServerConfig) GetServerCert() string {
	if m != nil {
		return m.ServerCert
	}
	return ""
}

func (m *StandaloneServerConfig) GetServerKey() string {
	if m != nil {
		return m.ServerKey
	}
	return ""
}

func (m *StandaloneServerConfig) GetMysqlUser() string {
	if m != nil {
		return m.MysqlUser
	}
	return ""
}

func (m *StandaloneServerConfig) GetMysqlPassword() string {
	if m != nil {
		return m.MysqlPassword
	}
	return ""
}

func (m *StandaloneServerConfig) GetMysqlDatabase() string {
	if m != nil {
		return m.MysqlDatabase
	}
	return ""
}

func (m *StandaloneServerConfig) GetMysqlAddr() string {
	if m != nil {
		return m.MysqlAddr
	}
	return ""
}

func (m *StandaloneServerConfig) GetBroadcastPollTime() *duration.Duration {
	if m != nil {
		return m.BroadcastPollTime
	}
	return nil
}

func (m *StandaloneServerConfig) GetServices() []*ServiceConfig {
	if m != nil {
		return m.Services
	}
	return nil
}

func init() {
	proto.RegisterType((*ServiceConfig)(nil), "fleetspeak.standalone.server.ServiceConfig")
	proto.RegisterType((*StandaloneServerConfig)(nil), "fleetspeak.standalone.server.StandaloneServerConfig")
}

func init() {
	proto.RegisterFile("fleetspeak/src/standalone/proto/fleetspeak_standalone_server/server.proto", fileDescriptor_07faf9cf3e135aed)
}

var fileDescriptor_07faf9cf3e135aed = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x5f, 0x6f, 0xd3, 0x30,
	0x10, 0x57, 0xd6, 0x2d, 0x5b, 0xaf, 0x74, 0x88, 0x20, 0x20, 0x4c, 0x74, 0x54, 0x93, 0x10, 0x95,
	0x90, 0x1c, 0x69, 0x48, 0xbc, 0xa3, 0x4d, 0x42, 0x13, 0x2f, 0x55, 0x0a, 0xcf, 0xd6, 0xd5, 0x76,
	0x4b, 0x34, 0x27, 0x0e, 0xb6, 0x0b, 0xed, 0x3b, 0x9f, 0x95, 0xcf, 0x81, 0x7a, 0x36, 0x4d, 0x40,
	0x88, 0xa7, 0x38, 0xbf, 0x3f, 0xf7, 0xbb, 0xb3, 0x0f, 0xee, 0x56, 0x5a, 0x29, 0xef, 0x5a, 0x85,
	0xf7, 0x85, 0xb3, 0xa2, 0x70, 0x1e, 0x1b, 0x89, 0xda, 0x34, 0xaa, 0x68, 0xad, 0xf1, 0xa6, 0xe8,
	0x78, 0xde, 0x71, 0xdc, 0x29, 0xfb, 0x4d, 0xd9, 0x22, 0x7c, 0x18, 0x29, 0xb3, 0x17, 0x9d, 0x94,
	0x75, 0x52, 0x16, 0x34, 0x17, 0x97, 0x6b, 0x63, 0xd6, 0x3a, 0x56, 0x5d, 0x6e, 0x56, 0x85, 0xdc,
	0x58, 0xf4, 0x95, 0x69, 0x82, 0xfb, 0x62, 0xfe, 0x77, 0x23, 0x21, 0x61, 0x6d, 0x5b, 0xb1, 0x3f,
	0x56, 0xe2, 0x1f, 0x0d, 0xf5, 0xc9, 0xde, 0x39, 0x54, 0xbc, 0xfa, 0x91, 0xc0, 0x78, 0x11, 0x90,
	0x1b, 0xd3, 0xac, 0xaa, 0x75, 0x96, 0xc1, 0x71, 0x83, 0xb5, 0xca, 0x93, 0x69, 0x32, 0x1b, 0x96,
	0x74, 0xce, 0x5e, 0xc3, 0xc3, 0x1a, 0xb7, 0xbc, 0x45, 0x8b, 0x5a, 0x2b, 0x5d, 0xb9, 0x3a, 0x3f,
	0x9a, 0x26, 0xb3, 0x71, 0x79, 0x5e, 0xe3, 0x76, 0xde, 0xa1, 0xd9, 0x3b, 0x48, 0x05, 0x95, 0xc9,
	0x07, 0xd3, 0x64, 0x36, 0xba, 0xbe, 0x64, 0xbd, 0x79, 0xfb, 0xe9, 0x21, 0xac, 0x8c, 0xea, 0xab,
	0x9f, 0x03, 0x78, 0xba, 0x38, 0x5c, 0xc7, 0x82, 0xc6, 0x8a, 0xfd, 0x4c, 0x00, 0x50, 0xd6, 0x55,
	0xc3, 0x51, 0x4a, 0x1b, 0xbb, 0x1a, 0x12, 0xf2, 0x5e, 0x4a, 0xbb, 0xa7, 0xbf, 0x78, 0xdf, 0xba,
	0x40, 0x1f, 0x05, 0x9a, 0x10, 0xa2, 0x9f, 0xc1, 0xa9, 0x40, 0x2e, 0x94, 0xf5, 0xd4, 0xd1, 0xb0,
	0x4c, 0x05, 0xde, 0x28, 0xeb, 0xb3, 0x27, 0x90, 0x0a, 0xe4, 0xf7, 0x6a, 0x97, 0x1f, 0x13, 0x7e,
	0x22, 0xf0, 0xa3, 0xda, 0x65, 0x2f, 0x61, 0x14, 0x2e, 0x35, 0x78, 0x4e, 0x88, 0x83, 0x00, 0x91,
	0x6f, 0x02, 0xf1, 0x8f, 0xbc, 0x69, 0xc8, 0x0b, 0xc8, 0xde, 0x3f, 0x01, 0xa8, 0x77, 0xee, 0xab,
	0xe6, 0x1b, 0xa7, 0x6c, 0x7e, 0x1a, 0x68, 0x42, 0x3e, 0x3b, 0x65, 0xb3, 0x57, 0x70, 0x1e, 0xe8,
	0x16, 0x9d, 0xfb, 0x6e, 0xac, 0xcc, 0xcf, 0x48, 0x32, 0x26, 0x74, 0x1e, 0xc1, 0x4e, 0x26, 0xd1,
	0xe3, 0x12, 0x9d, 0xca, 0x87, 0x3d, 0xd9, 0x6d, 0x04, 0xbb, 0x30, 0x9a, 0x1d, 0x7a, 0x61, 0x34,
	0xfb, 0x1d, 0x3c, 0x5e, 0x5a, 0x83, 0x52, 0xa0, 0xf3, 0xbc, 0x35, 0x5a, 0x73, 0x5f, 0xd5, 0x2a,
	0x1f, 0xd1, 0xcb, 0x3c, 0x67, 0x61, 0xd7, 0xd8, 0xef, 0x5d, 0x63, 0xb7, 0x71, 0xd7, 0xca, 0x47,
	0x07, 0xd7, 0xdc, 0x68, 0xfd, 0xa9, 0xaa, 0x55, 0xf6, 0x01, 0xce, 0xe2, 0xcb, 0xb9, 0xfc, 0xc1,
	0x74, 0x30, 0x1b, 0x5d, 0xbf, 0x61, 0xff, 0xdb, 0x64, 0xf6, 0xc7, 0x4e, 0x95, 0x07, 0xf3, 0x32,
	0xa5, 0xb8, 0xb7, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x68, 0x7c, 0x00, 0x2b, 0x53, 0x03, 0x00,
	0x00,
}
