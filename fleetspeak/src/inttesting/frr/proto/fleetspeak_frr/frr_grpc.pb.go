// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: fleetspeak/src/inttesting/frr/proto/fleetspeak_frr/frr.proto

package fleetspeak_frr

import (
	context "context"
	fleetspeak "github.com/google/fleetspeak/fleetspeak/src/common/proto/fleetspeak"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Master_RecordTrafficResponse_FullMethodName = "/fleetspeak.frr.Master/RecordTrafficResponse"
	Master_RecordFileResponse_FullMethodName    = "/fleetspeak.frr.Master/RecordFileResponse"
	Master_CompletedRequests_FullMethodName     = "/fleetspeak.frr.Master/CompletedRequests"
	Master_CreateHunt_FullMethodName            = "/fleetspeak.frr.Master/CreateHunt"
)

// MasterClient is the client API for Master service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The service implemented by the FRR master server to collect data from the FRR
// Fleetspeak server services.
type MasterClient interface {
	// RecordMessage records that a TrafficResponse message was received by
	// the FS server.
	RecordTrafficResponse(ctx context.Context, in *MessageInfo, opts ...grpc.CallOption) (*fleetspeak.EmptyMessage, error)
	// RecordFileResponse records that a FileResponse message was received
	// by the FS server.
	RecordFileResponse(ctx context.Context, in *FileResponseInfo, opts ...grpc.CallOption) (*fleetspeak.EmptyMessage, error)
	// CompletedRequests returns a list of requests made to a client which have
	// been completed.
	CompletedRequests(ctx context.Context, in *CompletedRequestsRequest, opts ...grpc.CallOption) (*CompletedRequestsResponse, error)
	// CreateHunt initiates a hunt which sends the provided TrafficRequestData to
	// every client, up to limit.
	CreateHunt(ctx context.Context, in *CreateHuntRequest, opts ...grpc.CallOption) (*CreateHuntResponse, error)
}

type masterClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterClient(cc grpc.ClientConnInterface) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) RecordTrafficResponse(ctx context.Context, in *MessageInfo, opts ...grpc.CallOption) (*fleetspeak.EmptyMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(fleetspeak.EmptyMessage)
	err := c.cc.Invoke(ctx, Master_RecordTrafficResponse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) RecordFileResponse(ctx context.Context, in *FileResponseInfo, opts ...grpc.CallOption) (*fleetspeak.EmptyMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(fleetspeak.EmptyMessage)
	err := c.cc.Invoke(ctx, Master_RecordFileResponse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) CompletedRequests(ctx context.Context, in *CompletedRequestsRequest, opts ...grpc.CallOption) (*CompletedRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompletedRequestsResponse)
	err := c.cc.Invoke(ctx, Master_CompletedRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) CreateHunt(ctx context.Context, in *CreateHuntRequest, opts ...grpc.CallOption) (*CreateHuntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHuntResponse)
	err := c.cc.Invoke(ctx, Master_CreateHunt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServer is the server API for Master service.
// All implementations must embed UnimplementedMasterServer
// for forward compatibility.
//
// The service implemented by the FRR master server to collect data from the FRR
// Fleetspeak server services.
type MasterServer interface {
	// RecordMessage records that a TrafficResponse message was received by
	// the FS server.
	RecordTrafficResponse(context.Context, *MessageInfo) (*fleetspeak.EmptyMessage, error)
	// RecordFileResponse records that a FileResponse message was received
	// by the FS server.
	RecordFileResponse(context.Context, *FileResponseInfo) (*fleetspeak.EmptyMessage, error)
	// CompletedRequests returns a list of requests made to a client which have
	// been completed.
	CompletedRequests(context.Context, *CompletedRequestsRequest) (*CompletedRequestsResponse, error)
	// CreateHunt initiates a hunt which sends the provided TrafficRequestData to
	// every client, up to limit.
	CreateHunt(context.Context, *CreateHuntRequest) (*CreateHuntResponse, error)
	mustEmbedUnimplementedMasterServer()
}

// UnimplementedMasterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMasterServer struct{}

func (UnimplementedMasterServer) RecordTrafficResponse(context.Context, *MessageInfo) (*fleetspeak.EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordTrafficResponse not implemented")
}
func (UnimplementedMasterServer) RecordFileResponse(context.Context, *FileResponseInfo) (*fleetspeak.EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordFileResponse not implemented")
}
func (UnimplementedMasterServer) CompletedRequests(context.Context, *CompletedRequestsRequest) (*CompletedRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompletedRequests not implemented")
}
func (UnimplementedMasterServer) CreateHunt(context.Context, *CreateHuntRequest) (*CreateHuntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHunt not implemented")
}
func (UnimplementedMasterServer) mustEmbedUnimplementedMasterServer() {}
func (UnimplementedMasterServer) testEmbeddedByValue()                {}

// UnsafeMasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServer will
// result in compilation errors.
type UnsafeMasterServer interface {
	mustEmbedUnimplementedMasterServer()
}

func RegisterMasterServer(s grpc.ServiceRegistrar, srv MasterServer) {
	// If the following call pancis, it indicates UnimplementedMasterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Master_ServiceDesc, srv)
}

func _Master_RecordTrafficResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).RecordTrafficResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_RecordTrafficResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).RecordTrafficResponse(ctx, req.(*MessageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_RecordFileResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileResponseInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).RecordFileResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_RecordFileResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).RecordFileResponse(ctx, req.(*FileResponseInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_CompletedRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompletedRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).CompletedRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_CompletedRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).CompletedRequests(ctx, req.(*CompletedRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_CreateHunt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHuntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).CreateHunt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_CreateHunt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).CreateHunt(ctx, req.(*CreateHuntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Master_ServiceDesc is the grpc.ServiceDesc for Master service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Master_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fleetspeak.frr.Master",
	HandlerType: (*MasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordTrafficResponse",
			Handler:    _Master_RecordTrafficResponse_Handler,
		},
		{
			MethodName: "RecordFileResponse",
			Handler:    _Master_RecordFileResponse_Handler,
		},
		{
			MethodName: "CompletedRequests",
			Handler:    _Master_CompletedRequests_Handler,
		},
		{
			MethodName: "CreateHunt",
			Handler:    _Master_CreateHunt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fleetspeak/src/inttesting/frr/proto/fleetspeak_frr/frr.proto",
}
