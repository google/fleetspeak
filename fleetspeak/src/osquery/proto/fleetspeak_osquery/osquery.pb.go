// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: fleetspeak/src/osquery/proto/fleetspeak_osquery/osquery.proto

package fleetspeak_osquery

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CompressionType int32

const (
	CompressionType_UNCOMPRESSED CompressionType = 0
	CompressionType_ZCOMPRESSION CompressionType = 1
)

// Enum value maps for CompressionType.
var (
	CompressionType_name = map[int32]string{
		0: "UNCOMPRESSED",
		1: "ZCOMPRESSION",
	}
	CompressionType_value = map[string]int32{
		"UNCOMPRESSED": 0,
		"ZCOMPRESSION": 1,
	}
)

func (x CompressionType) Enum() *CompressionType {
	p := new(CompressionType)
	*p = x
	return p
}

func (x CompressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_enumTypes[0].Descriptor()
}

func (CompressionType) Type() protoreflect.EnumType {
	return &file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_enumTypes[0]
}

func (x CompressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompressionType.Descriptor instead.
func (CompressionType) EnumDescriptor() ([]byte, []int) {
	return file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_rawDescGZIP(), []int{0}
}

type LoggedResult_Type int32

const (
	LoggedResult_UNKNOWN  LoggedResult_Type = 0
	LoggedResult_STRING   LoggedResult_Type = 1
	LoggedResult_SNAPSHOT LoggedResult_Type = 2
	LoggedResult_HEALTH   LoggedResult_Type = 3
	LoggedResult_INIT     LoggedResult_Type = 4
	LoggedResult_STATUS   LoggedResult_Type = 5
)

// Enum value maps for LoggedResult_Type.
var (
	LoggedResult_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "STRING",
		2: "SNAPSHOT",
		3: "HEALTH",
		4: "INIT",
		5: "STATUS",
	}
	LoggedResult_Type_value = map[string]int32{
		"UNKNOWN":  0,
		"STRING":   1,
		"SNAPSHOT": 2,
		"HEALTH":   3,
		"INIT":     4,
		"STATUS":   5,
	}
)

func (x LoggedResult_Type) Enum() *LoggedResult_Type {
	p := new(LoggedResult_Type)
	*p = x
	return p
}

func (x LoggedResult_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoggedResult_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_enumTypes[1].Descriptor()
}

func (LoggedResult_Type) Type() protoreflect.EnumType {
	return &file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_enumTypes[1]
}

func (x LoggedResult_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoggedResult_Type.Descriptor instead.
func (LoggedResult_Type) EnumDescriptor() ([]byte, []int) {
	return file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_rawDescGZIP(), []int{0, 0}
}

// A LoggedResult message contains data provided to an osquery Logger, containing
// e.g. query results from a snapshot query.
type LoggedResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     LoggedResult_Type `protobuf:"varint,1,opt,name=type,proto3,enum=fleetspeak.osquery.LoggedResult_Type" json:"type,omitempty"`
	Compress CompressionType   `protobuf:"varint,2,opt,name=compress,proto3,enum=fleetspeak.osquery.CompressionType" json:"compress,omitempty"`
	// JSON payload, encoded according to the compress attribute.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *LoggedResult) Reset() {
	*x = LoggedResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggedResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggedResult) ProtoMessage() {}

func (x *LoggedResult) ProtoReflect() protoreflect.Message {
	mi := &file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggedResult.ProtoReflect.Descriptor instead.
func (*LoggedResult) Descriptor() ([]byte, []int) {
	return file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_rawDescGZIP(), []int{0}
}

func (x *LoggedResult) GetType() LoggedResult_Type {
	if x != nil {
		return x.Type
	}
	return LoggedResult_UNKNOWN
}

func (x *LoggedResult) GetCompress() CompressionType {
	if x != nil {
		return x.Compress
	}
	return CompressionType_UNCOMPRESSED
}

func (x *LoggedResult) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// A Queries message contains queries to execute using osquery through the
// osquery distributed inteface.
type Queries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// map from query name to SQL text.
	Queries map[string]string `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// map from query name to SQL text. If a discovery query name matches an entry
	// in queries, that entry will be executed only if the discovery query returns
	// a result.
	Discovery map[string]string `protobuf:"bytes,2,rep,name=discovery,proto3" json:"discovery,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Queries) Reset() {
	*x = Queries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Queries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Queries) ProtoMessage() {}

func (x *Queries) ProtoReflect() protoreflect.Message {
	mi := &file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Queries.ProtoReflect.Descriptor instead.
func (*Queries) Descriptor() ([]byte, []int) {
	return file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_rawDescGZIP(), []int{1}
}

func (x *Queries) GetQueries() map[string]string {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *Queries) GetDiscovery() map[string]string {
	if x != nil {
		return x.Discovery
	}
	return nil
}

type Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row map[string]string `protobuf:"bytes,1,rep,name=row,proto3" json:"row,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Row) Reset() {
	*x = Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row.ProtoReflect.Descriptor instead.
func (*Row) Descriptor() ([]byte, []int) {
	return file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_rawDescGZIP(), []int{2}
}

func (x *Row) GetRow() map[string]string {
	if x != nil {
		return x.Row
	}
	return nil
}

type Rows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []*Row `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *Rows) Reset() {
	*x = Rows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rows) ProtoMessage() {}

func (x *Rows) ProtoReflect() protoreflect.Message {
	mi := &file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rows.ProtoReflect.Descriptor instead.
func (*Rows) Descriptor() ([]byte, []int) {
	return file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_rawDescGZIP(), []int{3}
}

func (x *Rows) GetRows() []*Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

// A QueryResults message contains one or more results for a query.
type QueryResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The query that these results are for.
	QueryName string `protobuf:"bytes,1,opt,name=query_name,json=queryName,proto3" json:"query_name,omitempty"`
	// Status code for the execution of query_name, 0=OK.
	Status   int64           `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Compress CompressionType `protobuf:"varint,3,opt,name=compress,proto3,enum=fleetspeak.osquery.CompressionType" json:"compress,omitempty"`
	// A serialized Rows message, compressed according to the compress attribued.
	Rows []byte `protobuf:"bytes,4,opt,name=Rows,proto3" json:"Rows,omitempty"`
}

func (x *QueryResults) Reset() {
	*x = QueryResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResults) ProtoMessage() {}

func (x *QueryResults) ProtoReflect() protoreflect.Message {
	mi := &file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResults.ProtoReflect.Descriptor instead.
func (*QueryResults) Descriptor() ([]byte, []int) {
	return file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_rawDescGZIP(), []int{4}
}

func (x *QueryResults) GetQueryName() string {
	if x != nil {
		return x.QueryName
	}
	return ""
}

func (x *QueryResults) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryResults) GetCompress() CompressionType {
	if x != nil {
		return x.Compress
	}
	return CompressionType_UNCOMPRESSED
}

func (x *QueryResults) GetRows() []byte {
	if x != nil {
		return x.Rows
	}
	return nil
}

var File_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto protoreflect.FileDescriptor

var file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_rawDesc = []byte{
	0x0a, 0x3d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2f, 0x73, 0x72, 0x63,
	0x2f, 0x6f, 0x73, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x6f, 0x73, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2f, 0x6f, 0x73, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2e, 0x6f, 0x73, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x22, 0xef, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2e,
	0x6f, 0x73, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3f, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2e, 0x6f,
	0x73, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x4f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f,
	0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x10, 0x03, 0x12,
	0x08, 0x0a, 0x04, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x10, 0x05, 0x22, 0x91, 0x02, 0x0a, 0x07, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x42, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2e,
	0x6f, 0x73, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x73, 0x70, 0x65, 0x61, 0x6b, 0x2e, 0x6f, 0x73, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x1a,
	0x3a, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x71, 0x0a, 0x03, 0x52, 0x6f, 0x77,
	0x12, 0x32, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2e, 0x6f, 0x73, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x52, 0x6f, 0x77, 0x2e, 0x52, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x03, 0x72, 0x6f, 0x77, 0x1a, 0x36, 0x0a, 0x08, 0x52, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33, 0x0a, 0x04,
	0x52, 0x6f, 0x77, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2e,
	0x6f, 0x73, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x22, 0x9a, 0x01, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2e, 0x6f, 0x73, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x6f,
	0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x52, 0x6f, 0x77, 0x73, 0x2a, 0x35,
	0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x5a, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x01, 0x42, 0x4e, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x73, 0x70, 0x65, 0x61, 0x6b, 0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b,
	0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6f, 0x73, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x6f, 0x73,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_rawDescOnce sync.Once
	file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_rawDescData = file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_rawDesc
)

func file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_rawDescGZIP() []byte {
	file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_rawDescOnce.Do(func() {
		file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_rawDescData = protoimpl.X.CompressGZIP(file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_rawDescData)
	})
	return file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_rawDescData
}

var file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_goTypes = []interface{}{
	(CompressionType)(0),   // 0: fleetspeak.osquery.CompressionType
	(LoggedResult_Type)(0), // 1: fleetspeak.osquery.LoggedResult.Type
	(*LoggedResult)(nil),   // 2: fleetspeak.osquery.LoggedResult
	(*Queries)(nil),        // 3: fleetspeak.osquery.Queries
	(*Row)(nil),            // 4: fleetspeak.osquery.Row
	(*Rows)(nil),           // 5: fleetspeak.osquery.Rows
	(*QueryResults)(nil),   // 6: fleetspeak.osquery.QueryResults
	nil,                    // 7: fleetspeak.osquery.Queries.QueriesEntry
	nil,                    // 8: fleetspeak.osquery.Queries.DiscoveryEntry
	nil,                    // 9: fleetspeak.osquery.Row.RowEntry
}
var file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_depIdxs = []int32{
	1, // 0: fleetspeak.osquery.LoggedResult.type:type_name -> fleetspeak.osquery.LoggedResult.Type
	0, // 1: fleetspeak.osquery.LoggedResult.compress:type_name -> fleetspeak.osquery.CompressionType
	7, // 2: fleetspeak.osquery.Queries.queries:type_name -> fleetspeak.osquery.Queries.QueriesEntry
	8, // 3: fleetspeak.osquery.Queries.discovery:type_name -> fleetspeak.osquery.Queries.DiscoveryEntry
	9, // 4: fleetspeak.osquery.Row.row:type_name -> fleetspeak.osquery.Row.RowEntry
	4, // 5: fleetspeak.osquery.Rows.rows:type_name -> fleetspeak.osquery.Row
	0, // 6: fleetspeak.osquery.QueryResults.compress:type_name -> fleetspeak.osquery.CompressionType
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_init() }
func file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_init() {
	if File_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggedResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Queries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_goTypes,
		DependencyIndexes: file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_depIdxs,
		EnumInfos:         file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_enumTypes,
		MessageInfos:      file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_msgTypes,
	}.Build()
	File_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto = out.File
	file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_rawDesc = nil
	file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_goTypes = nil
	file_fleetspeak_src_osquery_proto_fleetspeak_osquery_osquery_proto_depIdxs = nil
}
