// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: fleetspeak/src/common/proto/fleetspeak/common.proto

package fleetspeak

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The message priority. The primary effect is on the ordering of messages
// sent from the client to the server.
type Message_Priority int32

const (
	Message_MEDIUM Message_Priority = 0 // Out of order, but results in a sensible default.
	Message_LOW    Message_Priority = 1
	Message_HIGH   Message_Priority = 2
)

// Enum value maps for Message_Priority.
var (
	Message_Priority_name = map[int32]string{
		0: "MEDIUM",
		1: "LOW",
		2: "HIGH",
	}
	Message_Priority_value = map[string]int32{
		"MEDIUM": 0,
		"LOW":    1,
		"HIGH":   2,
	}
)

func (x Message_Priority) Enum() *Message_Priority {
	p := new(Message_Priority)
	*p = x
	return p
}

func (x Message_Priority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_Priority) Descriptor() protoreflect.EnumDescriptor {
	return file_fleetspeak_src_common_proto_fleetspeak_common_proto_enumTypes[0].Descriptor()
}

func (Message_Priority) Type() protoreflect.EnumType {
	return &file_fleetspeak_src_common_proto_fleetspeak_common_proto_enumTypes[0]
}

func (x Message_Priority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Message_Priority.Descriptor instead.
func (Message_Priority) EnumDescriptor() ([]byte, []int) {
	return file_fleetspeak_src_common_proto_fleetspeak_common_proto_rawDescGZIP(), []int{2, 0}
}

// An Address identifies the source or destination of a message.
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The client_id, if the address refers to a service on a client. If unset,
	// the address refers to a service on the server.
	ClientId []byte `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The name of the fleetspeak service which sent or should receive the
	// message.  Required.
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_fleetspeak_src_common_proto_fleetspeak_common_proto_rawDescGZIP(), []int{0}
}

func (x *Address) GetClientId() []byte {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *Address) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

type ValidationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags map[string]string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ValidationInfo) Reset() {
	*x = ValidationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationInfo) ProtoMessage() {}

func (x *ValidationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationInfo.ProtoReflect.Descriptor instead.
func (*ValidationInfo) Descriptor() ([]byte, []int) {
	return file_fleetspeak_src_common_proto_fleetspeak_common_proto_rawDescGZIP(), []int{1}
}

func (x *ValidationInfo) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A hash based on origin and origin_message_id. It is set by the fleetspeak
	// system on message intake and may be used for deduplication.
	MessageId []byte `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// The source of the messages. Required.
	Source *Address `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// An sequence of bytes set by the source in a way to uniquely identify the
	// message among all messages with the same origin.
	SourceMessageId []byte `protobuf:"bytes,3,opt,name=source_message_id,json=sourceMessageId,proto3" json:"source_message_id,omitempty"`
	// The destination of the message. Required.
	Destination *Address `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
	// The type of message. This field is mostly opaque to the Fleetspeak system,
	// but can be used for some statistics gathering. It is recommended that each
	// service define a static collection of short readable message types and
	// dispatch according to this when processing messages. e.g. "ResourceUsage",
	// "StdOutputData".
	MessageType string `protobuf:"bytes,5,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	// Set when the message enters the FS system.
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// The data associated with this request, accepted types are determined by the
	// service and may depend on message_type. Not typically stored after the
	// message is processed.
	Data *anypb.Any `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	// Additional validation information, set by on the server by the (optional)
	// authorizer component based on WrappedContactData.validators, etc.
	ValidationInfo *ValidationInfo `protobuf:"bytes,8,opt,name=validation_info,json=validationInfo,proto3" json:"validation_info,omitempty"`
	// The result of processing the message. Set once processing has finished.
	Result   *MessageResult   `protobuf:"bytes,9,opt,name=result,proto3" json:"result,omitempty"`
	Priority Message_Priority `protobuf:"varint,10,opt,name=priority,proto3,enum=fleetspeak.Message_Priority" json:"priority,omitempty"`
	// A background message does not count as activity when deciding how fast to
	// poll the server. This flag should be set on messages which are unlikely to
	// trigger additional activity.
	Background bool `protobuf:"varint,11,opt,name=background,proto3" json:"background,omitempty"`
	// Optional debugging information provided by the originator of the
	// message. Fleetspeak stores this information along with the message for
	// later retrieval, but doesn't really do anything else with it.
	Annotations *Annotations `protobuf:"bytes,12,opt,name=annotations,proto3" json:"annotations,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_fleetspeak_src_common_proto_fleetspeak_common_proto_rawDescGZIP(), []int{2}
}

func (x *Message) GetMessageId() []byte {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *Message) GetSource() *Address {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Message) GetSourceMessageId() []byte {
	if x != nil {
		return x.SourceMessageId
	}
	return nil
}

func (x *Message) GetDestination() *Address {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *Message) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *Message) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Message) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Message) GetValidationInfo() *ValidationInfo {
	if x != nil {
		return x.ValidationInfo
	}
	return nil
}

func (x *Message) GetResult() *MessageResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *Message) GetPriority() Message_Priority {
	if x != nil {
		return x.Priority
	}
	return Message_MEDIUM
}

func (x *Message) GetBackground() bool {
	if x != nil {
		return x.Background
	}
	return false
}

func (x *Message) GetAnnotations() *Annotations {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type MessageResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time that processing finished.
	ProcessedTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=processed_time,json=processedTime,proto3" json:"processed_time,omitempty"`
	// Set when processing ended with a permanent failure.
	Failed bool `protobuf:"varint,3,opt,name=failed,proto3" json:"failed,omitempty"`
	// A human readable error message, normally set when failed is true.
	FailedReason string `protobuf:"bytes,4,opt,name=failed_reason,json=failedReason,proto3" json:"failed_reason,omitempty"`
}

func (x *MessageResult) Reset() {
	*x = MessageResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageResult) ProtoMessage() {}

func (x *MessageResult) ProtoReflect() protoreflect.Message {
	mi := &file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageResult.ProtoReflect.Descriptor instead.
func (*MessageResult) Descriptor() ([]byte, []int) {
	return file_fleetspeak_src_common_proto_fleetspeak_common_proto_rawDescGZIP(), []int{3}
}

func (x *MessageResult) GetProcessedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ProcessedTime
	}
	return nil
}

func (x *MessageResult) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

func (x *MessageResult) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

type Annotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*Annotations_Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *Annotations) Reset() {
	*x = Annotations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotations) ProtoMessage() {}

func (x *Annotations) ProtoReflect() protoreflect.Message {
	mi := &file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotations.ProtoReflect.Descriptor instead.
func (*Annotations) Descriptor() ([]byte, []int) {
	return file_fleetspeak_src_common_proto_fleetspeak_common_proto_rawDescGZIP(), []int{4}
}

func (x *Annotations) GetEntries() []*Annotations_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// A Label is a tag assigned to a client by a plugin. Primary use is to limit
// broadcasts to specific clients.
type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The service which set this label.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// A free form tag choosen by the setting plugin.
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_fleetspeak_src_common_proto_fleetspeak_common_proto_rawDescGZIP(), []int{5}
}

func (x *Label) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Label) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A chain of ASN.1 DER encoded x509 certificates.
	Certificate [][]byte `protobuf:"bytes,1,rep,name=certificate,proto3" json:"certificate,omitempty"`
	// Indicates the choice of signature algorithm, a constant from
	// https://golang.org/pkg/crypto/x509/#SignatureAlgorithm
	Algorithm int32 `protobuf:"varint,2,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	// A signature of the validated data, it should be consistent with both the
	// algorithm choice and the first element of the certificate chain.
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_fleetspeak_src_common_proto_fleetspeak_common_proto_rawDescGZIP(), []int{6}
}

func (x *Signature) GetCertificate() [][]byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *Signature) GetAlgorithm() int32 {
	if x != nil {
		return x.Algorithm
	}
	return 0
}

func (x *Signature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// A WrappedContactData is provided by the client to the server with every
// contact.
type WrappedContactData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactData []byte       `protobuf:"bytes,1,opt,name=contact_data,json=contactData,proto3" json:"contact_data,omitempty"` // A serialized ContactData.
	Signatures  []*Signature `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`                      // Optional extra signatures validating
	// contact_data.
	ClientLabels []string `protobuf:"bytes,3,rep,name=client_labels,json=clientLabels,proto3" json:"client_labels,omitempty"` // The labels that the client claims to
}

func (x *WrappedContactData) Reset() {
	*x = WrappedContactData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WrappedContactData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WrappedContactData) ProtoMessage() {}

func (x *WrappedContactData) ProtoReflect() protoreflect.Message {
	mi := &file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WrappedContactData.ProtoReflect.Descriptor instead.
func (*WrappedContactData) Descriptor() ([]byte, []int) {
	return file_fleetspeak_src_common_proto_fleetspeak_common_proto_rawDescGZIP(), []int{7}
}

func (x *WrappedContactData) GetContactData() []byte {
	if x != nil {
		return x.ContactData
	}
	return nil
}

func (x *WrappedContactData) GetSignatures() []*Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *WrappedContactData) GetClientLabels() []string {
	if x != nil {
		return x.ClientLabels
	}
	return nil
}

// On every contact, the client and server exchange ContactData messages.
type ContactData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// During every contact, the server passes a random sequencing_nonce to the
	// client, and the client provides the sequencing_nonce to the server during
	// the next contact.
	SequencingNonce uint64     `protobuf:"varint,1,opt,name=sequencing_nonce,json=sequencingNonce,proto3" json:"sequencing_nonce,omitempty"`
	Messages        []*Message `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	// Records the client's current time setting, as of the creation of this
	// ContactData. Only set by the client.
	ClientClock *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=client_clock,json=clientClock,proto3" json:"client_clock,omitempty"`
	// If set, acknowledges receipt of a streamed WrappedContactData. This is used
	// for control purposes during streaming connections.
	AckIndex uint64 `protobuf:"varint,4,opt,name=ack_index,json=ackIndex,proto3" json:"ack_index,omitempty"`
	// If set, indicates that the connection is shutting down and no more data
	// will be sent.
	DoneSending bool `protobuf:"varint,5,opt,name=done_sending,json=doneSending,proto3" json:"done_sending,omitempty"`
	// Set by the client to indicate how many messages it is willing to accept for
	// each installed service. After the first exchange of an streaming connection, it
	// represents the number of additional messages that will be accepted.
	AllowedMessages map[string]uint64 `protobuf:"bytes,6,rep,name=AllowedMessages,proto3" json:"AllowedMessages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ContactData) Reset() {
	*x = ContactData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactData) ProtoMessage() {}

func (x *ContactData) ProtoReflect() protoreflect.Message {
	mi := &file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactData.ProtoReflect.Descriptor instead.
func (*ContactData) Descriptor() ([]byte, []int) {
	return file_fleetspeak_src_common_proto_fleetspeak_common_proto_rawDescGZIP(), []int{8}
}

func (x *ContactData) GetSequencingNonce() uint64 {
	if x != nil {
		return x.SequencingNonce
	}
	return 0
}

func (x *ContactData) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *ContactData) GetClientClock() *timestamppb.Timestamp {
	if x != nil {
		return x.ClientClock
	}
	return nil
}

func (x *ContactData) GetAckIndex() uint64 {
	if x != nil {
		return x.AckIndex
	}
	return 0
}

func (x *ContactData) GetDoneSending() bool {
	if x != nil {
		return x.DoneSending
	}
	return false
}

func (x *ContactData) GetAllowedMessages() map[string]uint64 {
	if x != nil {
		return x.AllowedMessages
	}
	return nil
}

// An empty message, typically used as a trivial RPC response.
type EmptyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyMessage) Reset() {
	*x = EmptyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyMessage) ProtoMessage() {}

func (x *EmptyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyMessage.ProtoReflect.Descriptor instead.
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return file_fleetspeak_src_common_proto_fleetspeak_common_proto_rawDescGZIP(), []int{9}
}

type Annotations_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Annotations_Entry) Reset() {
	*x = Annotations_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotations_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotations_Entry) ProtoMessage() {}

func (x *Annotations_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotations_Entry.ProtoReflect.Descriptor instead.
func (*Annotations_Entry) Descriptor() ([]byte, []int) {
	return file_fleetspeak_src_common_proto_fleetspeak_common_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Annotations_Entry) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Annotations_Entry) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_fleetspeak_src_common_proto_fleetspeak_common_proto protoreflect.FileDescriptor

var file_fleetspeak_src_common_proto_fleetspeak_common_proto_rawDesc = []byte{
	0x0a, 0x33, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2f, 0x73, 0x72, 0x63,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61,
	0x6b, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x49, 0x0a,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x0e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfe,
	0x04, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x38, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x29, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x22,
	0x8f, 0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x77, 0x0a, 0x0b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x37, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x2f, 0x0a, 0x05, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x40, 0x0a, 0x05, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x69, 0x0a, 0x09,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x12, 0x57, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65,
	0x61, 0x6b, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x84, 0x03,
	0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a,
	0x10, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x6b, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x63, 0x6b,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x6f, 0x6e,
	0x65, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x56, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x1a, 0x42, 0x0a, 0x14, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x45, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2f,
	0x73, 0x72, 0x63, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_fleetspeak_src_common_proto_fleetspeak_common_proto_rawDescOnce sync.Once
	file_fleetspeak_src_common_proto_fleetspeak_common_proto_rawDescData = file_fleetspeak_src_common_proto_fleetspeak_common_proto_rawDesc
)

func file_fleetspeak_src_common_proto_fleetspeak_common_proto_rawDescGZIP() []byte {
	file_fleetspeak_src_common_proto_fleetspeak_common_proto_rawDescOnce.Do(func() {
		file_fleetspeak_src_common_proto_fleetspeak_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_fleetspeak_src_common_proto_fleetspeak_common_proto_rawDescData)
	})
	return file_fleetspeak_src_common_proto_fleetspeak_common_proto_rawDescData
}

var file_fleetspeak_src_common_proto_fleetspeak_common_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_fleetspeak_src_common_proto_fleetspeak_common_proto_goTypes = []interface{}{
	(Message_Priority)(0),         // 0: fleetspeak.Message.Priority
	(*Address)(nil),               // 1: fleetspeak.Address
	(*ValidationInfo)(nil),        // 2: fleetspeak.ValidationInfo
	(*Message)(nil),               // 3: fleetspeak.Message
	(*MessageResult)(nil),         // 4: fleetspeak.MessageResult
	(*Annotations)(nil),           // 5: fleetspeak.Annotations
	(*Label)(nil),                 // 6: fleetspeak.Label
	(*Signature)(nil),             // 7: fleetspeak.Signature
	(*WrappedContactData)(nil),    // 8: fleetspeak.WrappedContactData
	(*ContactData)(nil),           // 9: fleetspeak.ContactData
	(*EmptyMessage)(nil),          // 10: fleetspeak.EmptyMessage
	nil,                           // 11: fleetspeak.ValidationInfo.TagsEntry
	(*Annotations_Entry)(nil),     // 12: fleetspeak.Annotations.Entry
	nil,                           // 13: fleetspeak.ContactData.AllowedMessagesEntry
	(*timestamppb.Timestamp)(nil), // 14: google.protobuf.Timestamp
	(*anypb.Any)(nil),             // 15: google.protobuf.Any
}
var file_fleetspeak_src_common_proto_fleetspeak_common_proto_depIdxs = []int32{
	11, // 0: fleetspeak.ValidationInfo.tags:type_name -> fleetspeak.ValidationInfo.TagsEntry
	1,  // 1: fleetspeak.Message.source:type_name -> fleetspeak.Address
	1,  // 2: fleetspeak.Message.destination:type_name -> fleetspeak.Address
	14, // 3: fleetspeak.Message.creation_time:type_name -> google.protobuf.Timestamp
	15, // 4: fleetspeak.Message.data:type_name -> google.protobuf.Any
	2,  // 5: fleetspeak.Message.validation_info:type_name -> fleetspeak.ValidationInfo
	4,  // 6: fleetspeak.Message.result:type_name -> fleetspeak.MessageResult
	0,  // 7: fleetspeak.Message.priority:type_name -> fleetspeak.Message.Priority
	5,  // 8: fleetspeak.Message.annotations:type_name -> fleetspeak.Annotations
	14, // 9: fleetspeak.MessageResult.processed_time:type_name -> google.protobuf.Timestamp
	12, // 10: fleetspeak.Annotations.entries:type_name -> fleetspeak.Annotations.Entry
	7,  // 11: fleetspeak.WrappedContactData.signatures:type_name -> fleetspeak.Signature
	3,  // 12: fleetspeak.ContactData.messages:type_name -> fleetspeak.Message
	14, // 13: fleetspeak.ContactData.client_clock:type_name -> google.protobuf.Timestamp
	13, // 14: fleetspeak.ContactData.AllowedMessages:type_name -> fleetspeak.ContactData.AllowedMessagesEntry
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_fleetspeak_src_common_proto_fleetspeak_common_proto_init() }
func file_fleetspeak_src_common_proto_fleetspeak_common_proto_init() {
	if File_fleetspeak_src_common_proto_fleetspeak_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WrappedContactData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotations_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fleetspeak_src_common_proto_fleetspeak_common_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fleetspeak_src_common_proto_fleetspeak_common_proto_goTypes,
		DependencyIndexes: file_fleetspeak_src_common_proto_fleetspeak_common_proto_depIdxs,
		EnumInfos:         file_fleetspeak_src_common_proto_fleetspeak_common_proto_enumTypes,
		MessageInfos:      file_fleetspeak_src_common_proto_fleetspeak_common_proto_msgTypes,
	}.Build()
	File_fleetspeak_src_common_proto_fleetspeak_common_proto = out.File
	file_fleetspeak_src_common_proto_fleetspeak_common_proto_rawDesc = nil
	file_fleetspeak_src_common_proto_fleetspeak_common_proto_goTypes = nil
	file_fleetspeak_src_common_proto_fleetspeak_common_proto_depIdxs = nil
}
