// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fleetspeak/src/client/generic/proto/fleetspeak_client_generic/config.proto

package fleetspeak_client_generic

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Config struct {
	// One or more PEM encoded certificates that the client should trust,
	// typically a CA certificate specific to the installation.
	TrustedCerts string `protobuf:"bytes,1,opt,name=trusted_certs,json=trustedCerts,proto3" json:"trusted_certs,omitempty"`
	// The servers that the client should attempt to connect to in <host>:<port>
	// format. E.g. "lazy.com:443", "10.0.0.5:1234"
	Server []string `protobuf:"bytes,2,rep,name=server,proto3" json:"server,omitempty"`
	// The client labels that this client should present to the server. Labels
	// indicating the client architecture and OS are automatically included.
	ClientLabel []string `protobuf:"bytes,3,rep,name=client_label,json=clientLabel,proto3" json:"client_label,omitempty"`
	// Types that are valid to be assigned to PersistenceHandler:
	//	*Config_FilesystemHandler
	//	*Config_RegistryHandler
	PersistenceHandler isConfig_PersistenceHandler `protobuf_oneof:"persistence_handler"`
	// If set, the client will use long running persistent connections, otherwise
	// it will make regular short lived polls to the server. Recommended.
	Streaming            bool     `protobuf:"varint,6,opt,name=streaming,proto3" json:"streaming,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_config_f45b01599d583594, []int{0}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (dst *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(dst, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

type isConfig_PersistenceHandler interface {
	isConfig_PersistenceHandler()
}

type Config_FilesystemHandler struct {
	FilesystemHandler *FilesystemHandler `protobuf:"bytes,4,opt,name=filesystem_handler,json=filesystemHandler,proto3,oneof"`
}
type Config_RegistryHandler struct {
	RegistryHandler *RegistryHandler `protobuf:"bytes,5,opt,name=registry_handler,json=registryHandler,proto3,oneof"`
}

func (*Config_FilesystemHandler) isConfig_PersistenceHandler() {}
func (*Config_RegistryHandler) isConfig_PersistenceHandler()   {}

func (m *Config) GetPersistenceHandler() isConfig_PersistenceHandler {
	if m != nil {
		return m.PersistenceHandler
	}
	return nil
}

func (m *Config) GetTrustedCerts() string {
	if m != nil {
		return m.TrustedCerts
	}
	return ""
}

func (m *Config) GetServer() []string {
	if m != nil {
		return m.Server
	}
	return nil
}

func (m *Config) GetClientLabel() []string {
	if m != nil {
		return m.ClientLabel
	}
	return nil
}

func (m *Config) GetFilesystemHandler() *FilesystemHandler {
	if x, ok := m.GetPersistenceHandler().(*Config_FilesystemHandler); ok {
		return x.FilesystemHandler
	}
	return nil
}

func (m *Config) GetRegistryHandler() *RegistryHandler {
	if x, ok := m.GetPersistenceHandler().(*Config_RegistryHandler); ok {
		return x.RegistryHandler
	}
	return nil
}

func (m *Config) GetStreaming() bool {
	if m != nil {
		return m.Streaming
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Config) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Config_OneofMarshaler, _Config_OneofUnmarshaler, _Config_OneofSizer, []interface{}{
		(*Config_FilesystemHandler)(nil),
		(*Config_RegistryHandler)(nil),
	}
}

func _Config_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Config)
	// persistence_handler
	switch x := m.PersistenceHandler.(type) {
	case *Config_FilesystemHandler:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FilesystemHandler); err != nil {
			return err
		}
	case *Config_RegistryHandler:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RegistryHandler); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Config.PersistenceHandler has unexpected type %T", x)
	}
	return nil
}

func _Config_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Config)
	switch tag {
	case 4: // persistence_handler.filesystem_handler
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FilesystemHandler)
		err := b.DecodeMessage(msg)
		m.PersistenceHandler = &Config_FilesystemHandler{msg}
		return true, err
	case 5: // persistence_handler.registry_handler
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RegistryHandler)
		err := b.DecodeMessage(msg)
		m.PersistenceHandler = &Config_RegistryHandler{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Config_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Config)
	// persistence_handler
	switch x := m.PersistenceHandler.(type) {
	case *Config_FilesystemHandler:
		s := proto.Size(x.FilesystemHandler)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Config_RegistryHandler:
		s := proto.Size(x.RegistryHandler)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type FilesystemHandler struct {
	// Where to persist client state, see NewFilesystemPersistenceHandler for
	// details:
	//
	// https://godoc.org/github.com/google/fleetspeak/fleetspeak/src/client/config#FilesystemPersistenceHandler
	ConfigurationDirectory string   `protobuf:"bytes,1,opt,name=configuration_directory,json=configurationDirectory,proto3" json:"configuration_directory,omitempty"`
	StateFile              string   `protobuf:"bytes,2,opt,name=state_file,json=stateFile,proto3" json:"state_file,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *FilesystemHandler) Reset()         { *m = FilesystemHandler{} }
func (m *FilesystemHandler) String() string { return proto.CompactTextString(m) }
func (*FilesystemHandler) ProtoMessage()    {}
func (*FilesystemHandler) Descriptor() ([]byte, []int) {
	return fileDescriptor_config_f45b01599d583594, []int{1}
}
func (m *FilesystemHandler) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FilesystemHandler.Unmarshal(m, b)
}
func (m *FilesystemHandler) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FilesystemHandler.Marshal(b, m, deterministic)
}
func (dst *FilesystemHandler) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilesystemHandler.Merge(dst, src)
}
func (m *FilesystemHandler) XXX_Size() int {
	return xxx_messageInfo_FilesystemHandler.Size(m)
}
func (m *FilesystemHandler) XXX_DiscardUnknown() {
	xxx_messageInfo_FilesystemHandler.DiscardUnknown(m)
}

var xxx_messageInfo_FilesystemHandler proto.InternalMessageInfo

func (m *FilesystemHandler) GetConfigurationDirectory() string {
	if m != nil {
		return m.ConfigurationDirectory
	}
	return ""
}

func (m *FilesystemHandler) GetStateFile() string {
	if m != nil {
		return m.StateFile
	}
	return ""
}

type RegistryHandler struct {
	// Where to persist client state, see NewWindowsRegistryPersistenceHandler
	// for details:
	//
	// https://github.com/google/fleetspeak/blob/master/fleetspeak/src/client/config/windows_registry_persistence_handler.go
	ConfigurationKey     string   `protobuf:"bytes,1,opt,name=configuration_key,json=configurationKey,proto3" json:"configuration_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistryHandler) Reset()         { *m = RegistryHandler{} }
func (m *RegistryHandler) String() string { return proto.CompactTextString(m) }
func (*RegistryHandler) ProtoMessage()    {}
func (*RegistryHandler) Descriptor() ([]byte, []int) {
	return fileDescriptor_config_f45b01599d583594, []int{2}
}
func (m *RegistryHandler) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistryHandler.Unmarshal(m, b)
}
func (m *RegistryHandler) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistryHandler.Marshal(b, m, deterministic)
}
func (dst *RegistryHandler) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryHandler.Merge(dst, src)
}
func (m *RegistryHandler) XXX_Size() int {
	return xxx_messageInfo_RegistryHandler.Size(m)
}
func (m *RegistryHandler) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryHandler.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryHandler proto.InternalMessageInfo

func (m *RegistryHandler) GetConfigurationKey() string {
	if m != nil {
		return m.ConfigurationKey
	}
	return ""
}

func init() {
	proto.RegisterType((*Config)(nil), "fleetspeak.client.generic.Config")
	proto.RegisterType((*FilesystemHandler)(nil), "fleetspeak.client.generic.FilesystemHandler")
	proto.RegisterType((*RegistryHandler)(nil), "fleetspeak.client.generic.RegistryHandler")
}

func init() {
	proto.RegisterFile("fleetspeak/src/client/generic/proto/fleetspeak_client_generic/config.proto", fileDescriptor_config_f45b01599d583594)
}

var fileDescriptor_config_f45b01599d583594 = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x41, 0x4f, 0xbb, 0x40,
	0x10, 0xc5, 0xff, 0xb4, 0x7f, 0x89, 0x4c, 0x6b, 0xda, 0xae, 0xb1, 0x62, 0xa2, 0x09, 0xd6, 0x0b,
	0x51, 0x03, 0x89, 0x1e, 0xbc, 0x79, 0xb0, 0xc6, 0x34, 0xea, 0x89, 0x8b, 0x27, 0x43, 0x28, 0x1d,
	0x70, 0x53, 0x0a, 0xcd, 0xec, 0xd6, 0x84, 0x0f, 0xea, 0xf7, 0x31, 0x2c, 0x50, 0x42, 0x8d, 0x1e,
	0xf9, 0xbd, 0x37, 0xef, 0xcd, 0x00, 0xf0, 0x1c, 0x25, 0x88, 0x52, 0xac, 0x31, 0x58, 0xba, 0x82,
	0x42, 0x37, 0x4c, 0x38, 0xa6, 0xd2, 0x8d, 0x31, 0x45, 0xe2, 0xa1, 0xbb, 0xa6, 0x4c, 0x66, 0x6e,
	0xe3, 0xf1, 0x4b, 0xdd, 0xaf, 0xf5, 0x30, 0x4b, 0x23, 0x1e, 0x3b, 0xca, 0xc6, 0x4e, 0x1a, 0x9f,
	0x53, 0xfa, 0x9c, 0xca, 0x37, 0xf9, 0xea, 0x80, 0x3e, 0x55, 0x5e, 0x76, 0x01, 0x07, 0x92, 0x36,
	0x42, 0xe2, 0xc2, 0x0f, 0x91, 0xa4, 0x30, 0x35, 0x4b, 0xb3, 0x0d, 0xaf, 0x5f, 0xc1, 0x69, 0xc1,
	0xd8, 0x18, 0x74, 0x81, 0xf4, 0x89, 0x64, 0x76, 0xac, 0xae, 0x6d, 0x78, 0xd5, 0x13, 0x3b, 0x87,
	0x7e, 0xb5, 0x41, 0x12, 0xcc, 0x31, 0x31, 0xbb, 0x4a, 0xed, 0x95, 0xec, 0xb5, 0x40, 0xec, 0x1d,
	0x58, 0xc4, 0x13, 0x14, 0xb9, 0x90, 0xb8, 0xf2, 0x3f, 0x82, 0x74, 0x91, 0x20, 0x99, 0xff, 0x2d,
	0xcd, 0xee, 0xdd, 0x5c, 0x3b, 0xbf, 0xae, 0xe8, 0x3c, 0x6d, 0x87, 0x66, 0xe5, 0xcc, 0xec, 0x9f,
	0x37, 0x8a, 0x76, 0x21, 0x7b, 0x83, 0x21, 0x61, 0xcc, 0x85, 0xa4, 0x7c, 0x1b, 0xbe, 0xa7, 0xc2,
	0x2f, 0xff, 0x08, 0xf7, 0xaa, 0x91, 0x26, 0x7a, 0x40, 0x6d, 0xc4, 0x4e, 0xc1, 0x10, 0x92, 0x30,
	0x58, 0xf1, 0x34, 0x36, 0x75, 0x4b, 0xb3, 0xf7, 0xbd, 0x06, 0x3c, 0x1c, 0xc1, 0xe1, 0x1a, 0x49,
	0x70, 0x21, 0x31, 0x0d, 0xb1, 0x6e, 0x9e, 0x2c, 0x61, 0xf4, 0x63, 0x6f, 0x76, 0x07, 0xc7, 0xe5,
	0x77, 0xd9, 0x50, 0x20, 0x79, 0x96, 0xfa, 0x0b, 0x4e, 0x18, 0xca, 0x8c, 0xf2, 0xea, 0x5d, 0x8f,
	0x5b, 0xf2, 0x63, 0xad, 0xb2, 0x33, 0x00, 0x21, 0x03, 0x89, 0x7e, 0x71, 0xb6, 0xd9, 0x51, 0x5e,
	0x43, 0x91, 0xa2, 0x64, 0x72, 0x0f, 0x83, 0x9d, 0x3b, 0xd8, 0x15, 0x8c, 0xda, 0x55, 0x4b, 0xac,
	0x4b, 0x86, 0x2d, 0xe1, 0x05, 0xf3, 0xb9, 0xae, 0x7e, 0x93, 0xdb, 0xef, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xcb, 0xdc, 0xea, 0x0b, 0x74, 0x02, 0x00, 0x00,
}
