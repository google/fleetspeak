// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fleetspeak/src/client/generic/proto/fleetspeak_client_generic/config.proto

package fleetspeak_client_generic

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Config struct {
	// One or more PEM encoded certificates that the client should trust,
	// typically a CA certificate specific to the installation.
	TrustedCerts string `protobuf:"bytes,1,opt,name=trusted_certs,json=trustedCerts,proto3" json:"trusted_certs,omitempty"`
	// The servers that the client should attempt to connect to in <host>:<port>
	// format. E.g. "lazy.com:443", "10.0.0.5:1234"
	Server []string `protobuf:"bytes,2,rep,name=server,proto3" json:"server,omitempty"`
	// The client labels that this client should present to the server. Labels
	// indicating the client architecture and OS are automatically included.
	ClientLabel []string `protobuf:"bytes,3,rep,name=client_label,json=clientLabel,proto3" json:"client_label,omitempty"`
	// Types that are valid to be assigned to PersistenceHandler:
	//	*Config_FilesystemHandler
	//	*Config_RegistryHandler
	PersistenceHandler isConfig_PersistenceHandler `protobuf_oneof:"persistence_handler"`
	// If set, the client will use long running persistent connections, otherwise
	// it will make regular short lived polls to the server. Recommended.
	Streaming            bool     `protobuf:"varint,6,opt,name=streaming,proto3" json:"streaming,omitempty"`
	Proxy                string   `protobuf:"bytes,7,opt,name=proxy,proto3" json:"proxy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a4da71ceca0ef7d, []int{0}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetTrustedCerts() string {
	if m != nil {
		return m.TrustedCerts
	}
	return ""
}

func (m *Config) GetServer() []string {
	if m != nil {
		return m.Server
	}
	return nil
}

func (m *Config) GetClientLabel() []string {
	if m != nil {
		return m.ClientLabel
	}
	return nil
}

type isConfig_PersistenceHandler interface {
	isConfig_PersistenceHandler()
}

type Config_FilesystemHandler struct {
	FilesystemHandler *FilesystemHandler `protobuf:"bytes,4,opt,name=filesystem_handler,json=filesystemHandler,proto3,oneof"`
}

type Config_RegistryHandler struct {
	RegistryHandler *RegistryHandler `protobuf:"bytes,5,opt,name=registry_handler,json=registryHandler,proto3,oneof"`
}

func (*Config_FilesystemHandler) isConfig_PersistenceHandler() {}

func (*Config_RegistryHandler) isConfig_PersistenceHandler() {}

func (m *Config) GetPersistenceHandler() isConfig_PersistenceHandler {
	if m != nil {
		return m.PersistenceHandler
	}
	return nil
}

func (m *Config) GetFilesystemHandler() *FilesystemHandler {
	if x, ok := m.GetPersistenceHandler().(*Config_FilesystemHandler); ok {
		return x.FilesystemHandler
	}
	return nil
}

func (m *Config) GetRegistryHandler() *RegistryHandler {
	if x, ok := m.GetPersistenceHandler().(*Config_RegistryHandler); ok {
		return x.RegistryHandler
	}
	return nil
}

func (m *Config) GetStreaming() bool {
	if m != nil {
		return m.Streaming
	}
	return false
}

func (m *Config) GetProxy() string {
	if m != nil {
		return m.Proxy
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Config) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Config_FilesystemHandler)(nil),
		(*Config_RegistryHandler)(nil),
	}
}

type FilesystemHandler struct {
	// Where to persist client state, see NewFilesystemPersistenceHandler for
	// details:
	//
	// https://godoc.org/github.com/google/fleetspeak/fleetspeak/src/client/config#FilesystemPersistenceHandler
	ConfigurationDirectory string   `protobuf:"bytes,1,opt,name=configuration_directory,json=configurationDirectory,proto3" json:"configuration_directory,omitempty"`
	StateFile              string   `protobuf:"bytes,2,opt,name=state_file,json=stateFile,proto3" json:"state_file,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *FilesystemHandler) Reset()         { *m = FilesystemHandler{} }
func (m *FilesystemHandler) String() string { return proto.CompactTextString(m) }
func (*FilesystemHandler) ProtoMessage()    {}
func (*FilesystemHandler) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a4da71ceca0ef7d, []int{1}
}

func (m *FilesystemHandler) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FilesystemHandler.Unmarshal(m, b)
}
func (m *FilesystemHandler) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FilesystemHandler.Marshal(b, m, deterministic)
}
func (m *FilesystemHandler) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilesystemHandler.Merge(m, src)
}
func (m *FilesystemHandler) XXX_Size() int {
	return xxx_messageInfo_FilesystemHandler.Size(m)
}
func (m *FilesystemHandler) XXX_DiscardUnknown() {
	xxx_messageInfo_FilesystemHandler.DiscardUnknown(m)
}

var xxx_messageInfo_FilesystemHandler proto.InternalMessageInfo

func (m *FilesystemHandler) GetConfigurationDirectory() string {
	if m != nil {
		return m.ConfigurationDirectory
	}
	return ""
}

func (m *FilesystemHandler) GetStateFile() string {
	if m != nil {
		return m.StateFile
	}
	return ""
}

type RegistryHandler struct {
	// Where to persist client state, see NewWindowsRegistryPersistenceHandler
	// for details:
	//
	// https://github.com/google/fleetspeak/blob/master/fleetspeak/src/client/config/windows_registry_persistence_handler.go
	ConfigurationKey     string   `protobuf:"bytes,1,opt,name=configuration_key,json=configurationKey,proto3" json:"configuration_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistryHandler) Reset()         { *m = RegistryHandler{} }
func (m *RegistryHandler) String() string { return proto.CompactTextString(m) }
func (*RegistryHandler) ProtoMessage()    {}
func (*RegistryHandler) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a4da71ceca0ef7d, []int{2}
}

func (m *RegistryHandler) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistryHandler.Unmarshal(m, b)
}
func (m *RegistryHandler) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistryHandler.Marshal(b, m, deterministic)
}
func (m *RegistryHandler) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryHandler.Merge(m, src)
}
func (m *RegistryHandler) XXX_Size() int {
	return xxx_messageInfo_RegistryHandler.Size(m)
}
func (m *RegistryHandler) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryHandler.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryHandler proto.InternalMessageInfo

func (m *RegistryHandler) GetConfigurationKey() string {
	if m != nil {
		return m.ConfigurationKey
	}
	return ""
}

func init() {
	proto.RegisterType((*Config)(nil), "fleetspeak.client.generic.Config")
	proto.RegisterType((*FilesystemHandler)(nil), "fleetspeak.client.generic.FilesystemHandler")
	proto.RegisterType((*RegistryHandler)(nil), "fleetspeak.client.generic.RegistryHandler")
}

func init() {
	proto.RegisterFile("fleetspeak/src/client/generic/proto/fleetspeak_client_generic/config.proto", fileDescriptor_4a4da71ceca0ef7d)
}

var fileDescriptor_4a4da71ceca0ef7d = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x41, 0x6f, 0x9b, 0x40,
	0x10, 0x85, 0x8b, 0x5d, 0xd3, 0x32, 0x76, 0x65, 0x7b, 0xdb, 0xba, 0x54, 0x6a, 0x25, 0xea, 0x5e,
	0x50, 0x12, 0x81, 0x94, 0x1c, 0x72, 0xcb, 0x21, 0x8e, 0x22, 0x2b, 0xc9, 0x89, 0x4b, 0x4e, 0x11,
	0xc2, 0x78, 0x20, 0x2b, 0x63, 0x40, 0xb3, 0xeb, 0x28, 0xfc, 0xe6, 0xfc, 0x89, 0x88, 0x05, 0x8c,
	0x70, 0x94, 0x1c, 0xf7, 0x7b, 0x6f, 0xde, 0xcc, 0xee, 0x2c, 0xdc, 0x44, 0x09, 0xa2, 0x14, 0x39,
	0x06, 0x1b, 0x57, 0x50, 0xe8, 0x86, 0x09, 0xc7, 0x54, 0xba, 0x31, 0xa6, 0x48, 0x3c, 0x74, 0x73,
	0xca, 0x64, 0xe6, 0xb6, 0x1e, 0xbf, 0xd2, 0xfd, 0x46, 0x0f, 0xb3, 0x34, 0xe2, 0xb1, 0xa3, 0x6c,
	0xec, 0x77, 0xeb, 0x73, 0x2a, 0x9f, 0x53, 0xfb, 0xe6, 0x2f, 0x3d, 0xd0, 0x17, 0xca, 0xcb, 0xfe,
	0xc3, 0x37, 0x49, 0x3b, 0x21, 0x71, 0xed, 0x87, 0x48, 0x52, 0x98, 0x9a, 0xa5, 0xd9, 0x86, 0x37,
	0xaa, 0xe1, 0xa2, 0x64, 0x6c, 0x06, 0xba, 0x40, 0x7a, 0x42, 0x32, 0x7b, 0x56, 0xdf, 0x36, 0xbc,
	0xfa, 0xc4, 0xfe, 0xc1, 0xa8, 0x9e, 0x20, 0x09, 0x56, 0x98, 0x98, 0x7d, 0xa5, 0x0e, 0x2b, 0x76,
	0x57, 0x22, 0xf6, 0x00, 0x2c, 0xe2, 0x09, 0x8a, 0x42, 0x48, 0xdc, 0xfa, 0x8f, 0x41, 0xba, 0x4e,
	0x90, 0xcc, 0xcf, 0x96, 0x66, 0x0f, 0x4f, 0x4f, 0x9c, 0x77, 0x47, 0x74, 0xae, 0xf7, 0x45, 0xcb,
	0xaa, 0x66, 0xf9, 0xc9, 0x9b, 0x46, 0x87, 0x90, 0xdd, 0xc3, 0x84, 0x30, 0xe6, 0x42, 0x52, 0xb1,
	0x0f, 0x1f, 0xa8, 0xf0, 0xa3, 0x0f, 0xc2, 0xbd, 0xba, 0xa4, 0x8d, 0x1e, 0x53, 0x17, 0xb1, 0x3f,
	0x60, 0x08, 0x49, 0x18, 0x6c, 0x79, 0x1a, 0x9b, 0xba, 0xa5, 0xd9, 0x5f, 0xbd, 0x16, 0xb0, 0x1f,
	0x30, 0xc8, 0x29, 0x7b, 0x2e, 0xcc, 0x2f, 0xea, 0xb5, 0xaa, 0xc3, 0xe5, 0x4f, 0xf8, 0x9e, 0x23,
	0x09, 0x2e, 0x24, 0xa6, 0x21, 0x36, 0xf3, 0xcc, 0x37, 0x30, 0x7d, 0x73, 0x1b, 0x76, 0x0e, 0xbf,
	0xaa, 0x6d, 0xed, 0x28, 0x90, 0x3c, 0x4b, 0xfd, 0x35, 0x27, 0x0c, 0x65, 0x46, 0x45, 0xbd, 0x81,
	0x59, 0x47, 0xbe, 0x6a, 0x54, 0xf6, 0x17, 0x40, 0xc8, 0x40, 0xa2, 0x5f, 0x3e, 0x86, 0xd9, 0x53,
	0x5e, 0x43, 0x91, 0xb2, 0xc9, 0xfc, 0x02, 0xc6, 0x07, 0xb7, 0x63, 0xc7, 0x30, 0xed, 0xb6, 0xda,
	0x60, 0xd3, 0x64, 0xd2, 0x11, 0x6e, 0xb1, 0x58, 0xe9, 0xea, 0xf3, 0x9c, 0xbd, 0x06, 0x00, 0x00,
	0xff, 0xff, 0x40, 0x6e, 0x0e, 0x2f, 0x8a, 0x02, 0x00, 0x00,
}
