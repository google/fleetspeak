// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fleetspeak/src/client/daemonservice/proto/fleetspeak_daemonservice/messages.proto

package fleetspeak_daemonservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A fleetspeak.Message with message type "StdOutput" and data type
// StdOutputData is sent by a daemon service to the server when the daemon
// subprocess produces output on stdout or stderr.
type StdOutputData struct {
	// The pid of the daemon process.
	Pid int64 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	// The index of this message within the set of messages returned for
	// this pid.
	MessageIndex         int64    `protobuf:"varint,2,opt,name=message_index,json=messageIndex,proto3" json:"message_index,omitempty"`
	Stdout               []byte   `protobuf:"bytes,3,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr               []byte   `protobuf:"bytes,4,opt,name=stderr,proto3" json:"stderr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StdOutputData) Reset()         { *m = StdOutputData{} }
func (m *StdOutputData) String() string { return proto.CompactTextString(m) }
func (*StdOutputData) ProtoMessage()    {}
func (*StdOutputData) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_ac08e7a74db6a692, []int{0}
}
func (m *StdOutputData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StdOutputData.Unmarshal(m, b)
}
func (m *StdOutputData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StdOutputData.Marshal(b, m, deterministic)
}
func (dst *StdOutputData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StdOutputData.Merge(dst, src)
}
func (m *StdOutputData) XXX_Size() int {
	return xxx_messageInfo_StdOutputData.Size(m)
}
func (m *StdOutputData) XXX_DiscardUnknown() {
	xxx_messageInfo_StdOutputData.DiscardUnknown(m)
}

var xxx_messageInfo_StdOutputData proto.InternalMessageInfo

func (m *StdOutputData) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *StdOutputData) GetMessageIndex() int64 {
	if m != nil {
		return m.MessageIndex
	}
	return 0
}

func (m *StdOutputData) GetStdout() []byte {
	if m != nil {
		return m.Stdout
	}
	return nil
}

func (m *StdOutputData) GetStderr() []byte {
	if m != nil {
		return m.Stderr
	}
	return nil
}

func init() {
	proto.RegisterType((*StdOutputData)(nil), "fleetspeak.daemonservice.StdOutputData")
}

func init() {
	proto.RegisterFile("fleetspeak/src/client/daemonservice/proto/fleetspeak_daemonservice/messages.proto", fileDescriptor_messages_ac08e7a74db6a692)
}

var fileDescriptor_messages_ac08e7a74db6a692 = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8e, 0xc1, 0x8a, 0x83, 0x30,
	0x10, 0x40, 0x71, 0x5d, 0x3c, 0x04, 0x85, 0x25, 0x87, 0x25, 0x47, 0xd9, 0xbd, 0x78, 0x32, 0x87,
	0xfe, 0x42, 0x2f, 0x3d, 0x95, 0xda, 0x0f, 0x90, 0xd4, 0x4c, 0x4b, 0xa8, 0x9a, 0x30, 0x33, 0x4a,
	0x3f, 0xbf, 0x28, 0xa1, 0xe2, 0x6d, 0xe6, 0xbd, 0xc7, 0x30, 0xe2, 0x72, 0xef, 0x01, 0x98, 0x02,
	0x98, 0xa7, 0x26, 0xec, 0x74, 0xd7, 0x3b, 0x18, 0x59, 0x5b, 0x03, 0x83, 0x1f, 0x09, 0x70, 0x76,
	0x1d, 0xe8, 0x80, 0x9e, 0xbd, 0xde, 0xca, 0x76, 0xaf, 0x07, 0x20, 0x32, 0x0f, 0xa0, 0x7a, 0xed,
	0xa4, 0xda, 0xc2, 0x7a, 0x17, 0xfe, 0xcd, 0xa2, 0xb8, 0xb2, 0x3d, 0x4f, 0x1c, 0x26, 0x3e, 0x1a,
	0x36, 0xf2, 0x47, 0xa4, 0xc1, 0x59, 0x95, 0x94, 0x49, 0x95, 0x36, 0xcb, 0x28, 0xff, 0x45, 0x11,
	0xcf, 0xb5, 0x6e, 0xb4, 0xf0, 0x52, 0x5f, 0xab, 0xcb, 0x23, 0x3c, 0x2d, 0x4c, 0xfe, 0x8a, 0x8c,
	0xd8, 0xfa, 0x89, 0x55, 0x5a, 0x26, 0x55, 0xde, 0xc4, 0x2d, 0x72, 0x40, 0x54, 0xdf, 0x1f, 0x0e,
	0x88, 0xb7, 0x6c, 0x7d, 0xec, 0xf0, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x24, 0x81, 0x4f, 0xed,
	0x00, 0x00, 0x00,
}
