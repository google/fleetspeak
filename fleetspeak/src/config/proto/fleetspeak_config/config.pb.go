// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fleetspeak/src/config/proto/fleetspeak_config/config.proto

package fleetspeak_config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import fleetspeak_components "github.com/google/fleetspeak/fleetspeak/src/server/components/proto/fleetspeak_components"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The configuration parameters needed by the configuration tool in order to
// create the artifacts needed to run a fleetspeak installation.
type Config struct {
	// An name for this installation, e.g. "Nascent" or "Nascent Staging".
	// Required.
	ConfigurationName string `protobuf:"bytes,1,opt,name=configuration_name,json=configurationName,proto3" json:"configuration_name,omitempty"`
	// A template for the components configuration file that will be generated.
	// The configuration tool will populate the https_config.key and
	// https_config.certificates fields based on the parameters below.
	ComponentsConfig *fleetspeak_components.Config `protobuf:"bytes,2,opt,name=components_config,json=componentsConfig,proto3" json:"components_config,omitempty"`
	// A file containing a PEM encoded certificate that clients should be
	// configured to trust. Typically a CA cert. If this file is not already
	// present, a 10 year self-signed CA certificate and associated private key
	// will be created.
	TrustedCertFile string `protobuf:"bytes,3,opt,name=trusted_cert_file,json=trustedCertFile,proto3" json:"trusted_cert_file,omitempty"`
	// A file containing the private key associated with trusted_cert_file, only
	// required if it is necessary to create server certificates.
	//
	// NOTE: Contains private key material. Only needs to be online when creating new
	// server certificates.
	TrustedCertKeyFile string `protobuf:"bytes,4,opt,name=trusted_cert_key_file,json=trustedCertKeyFile,proto3" json:"trusted_cert_key_file,omitempty"`
	// A file containing a PEM encoded certificate that the Fleetspeak server
	// should use to identify itself. If this file is not already present, a 1
	// year certificate signed directly using the contents of
	// trusted_cert_?(key_)file will be created.
	ServerCertFile string `protobuf:"bytes,5,opt,name=server_cert_file,json=serverCertFile,proto3" json:"server_cert_file,omitempty"`
	// A file containing the private key associated with
	// server_cert_file. Required.
	//
	// NOTE: Contains private key material.
	ServerCertKeyFile string `protobuf:"bytes,6,opt,name=server_cert_key_file,json=serverCertKeyFile,proto3" json:"server_cert_key_file,omitempty"`
	// Where to write the fleetspeak server component configuration file.
	//
	// NOTE: Result will contain private key material. Will only be needed by
	// fleetspeak servers.
	ServerComponentConfigurationFile string `protobuf:"bytes,7,opt,name=server_component_configuration_file,json=serverComponentConfigurationFile,proto3" json:"server_component_configuration_file,omitempty"`
	// How clients should find the fleetspeak server(s) used by this installation.
	//
	// Each entry should be of the form "<ip/hostname>:<port>". Note the clients
	// will not perform any intelligent load balancing, rather they will continue
	// to use the first option which works for them.
	//
	// If you are creating your own server certificates, they will need to cover
	// these addresses.
	PublicHostPort       []string `protobuf:"bytes,8,rep,name=public_host_port,json=publicHostPort,proto3" json:"public_host_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_config_9119e81c0f74769a, []int{0}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (dst *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(dst, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetConfigurationName() string {
	if m != nil {
		return m.ConfigurationName
	}
	return ""
}

func (m *Config) GetComponentsConfig() *fleetspeak_components.Config {
	if m != nil {
		return m.ComponentsConfig
	}
	return nil
}

func (m *Config) GetTrustedCertFile() string {
	if m != nil {
		return m.TrustedCertFile
	}
	return ""
}

func (m *Config) GetTrustedCertKeyFile() string {
	if m != nil {
		return m.TrustedCertKeyFile
	}
	return ""
}

func (m *Config) GetServerCertFile() string {
	if m != nil {
		return m.ServerCertFile
	}
	return ""
}

func (m *Config) GetServerCertKeyFile() string {
	if m != nil {
		return m.ServerCertKeyFile
	}
	return ""
}

func (m *Config) GetServerComponentConfigurationFile() string {
	if m != nil {
		return m.ServerComponentConfigurationFile
	}
	return ""
}

func (m *Config) GetPublicHostPort() []string {
	if m != nil {
		return m.PublicHostPort
	}
	return nil
}

func init() {
	proto.RegisterType((*Config)(nil), "fleetspeak.config.Config")
}

func init() {
	proto.RegisterFile("fleetspeak/src/config/proto/fleetspeak_config/config.proto", fileDescriptor_config_9119e81c0f74769a)
}

var fileDescriptor_config_9119e81c0f74769a = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x5f, 0x4b, 0x84, 0x40,
	0x14, 0xc5, 0x31, 0xcb, 0x6a, 0x82, 0x5a, 0x87, 0x02, 0x09, 0x02, 0xa9, 0x17, 0x09, 0x72, 0xa8,
	0xde, 0x7a, 0x15, 0xa2, 0x3f, 0x14, 0xb1, 0x5f, 0x60, 0x70, 0xed, 0x5a, 0xb2, 0xea, 0xc8, 0xcc,
	0x35, 0xd8, 0x2f, 0xd6, 0xe7, 0x8b, 0x66, 0x1c, 0x1d, 0xa3, 0x27, 0xe1, 0x9c, 0xdf, 0x39, 0xf7,
	0x7a, 0x87, 0xdc, 0x95, 0x35, 0x00, 0xaa, 0x0e, 0xf2, 0x35, 0x53, 0xb2, 0x60, 0x85, 0x68, 0xcb,
	0xea, 0x83, 0x75, 0x52, 0xa0, 0x60, 0x93, 0xc7, 0x07, 0xdd, 0x7c, 0x52, 0x6d, 0xd3, 0x70, 0xf2,
	0x53, 0x63, 0x9c, 0x3e, 0xfe, 0xa9, 0x53, 0x20, 0xbf, 0x40, 0xb2, 0x42, 0x34, 0x9d, 0x68, 0xa1,
	0x45, 0xf5, 0x5f, 0xf3, 0xe8, 0xb9, 0xed, 0xe7, 0xdf, 0x3e, 0x09, 0x32, 0x2d, 0xd0, 0x2b, 0x42,
	0x8d, 0xd5, 0xcb, 0x1c, 0x2b, 0xd1, 0xf2, 0x36, 0x6f, 0x20, 0xf2, 0x62, 0x2f, 0xd9, 0x5f, 0x86,
	0x33, 0xe7, 0x35, 0x6f, 0x80, 0x3e, 0x91, 0x70, 0x2a, 0x1d, 0x36, 0x8f, 0xb6, 0x62, 0x2f, 0x39,
	0xb8, 0x39, 0x4b, 0x67, 0x3b, 0x5b, 0x28, 0x35, 0x83, 0x96, 0x8b, 0x49, 0x1a, 0x46, 0x5f, 0x92,
	0x10, 0x65, 0xaf, 0x10, 0xde, 0x79, 0x01, 0x12, 0x79, 0x59, 0xd5, 0x10, 0xf9, 0x7a, 0xf2, 0xd1,
	0x60, 0x64, 0x20, 0xf1, 0xbe, 0xaa, 0x81, 0x5e, 0x93, 0x93, 0x19, 0xbb, 0x86, 0x8d, 0xe1, 0xb7,
	0x35, 0x4f, 0x1d, 0xfe, 0x19, 0x36, 0x3a, 0x92, 0x90, 0x85, 0x39, 0x91, 0xd3, 0xbe, 0xa3, 0xe9,
	0x43, 0xa3, 0x8f, 0xe5, 0x8c, 0x1c, 0xbb, 0xe4, 0xd8, 0x1d, 0x98, 0x2b, 0x4c, 0xb4, 0xad, 0x7e,
	0x21, 0x17, 0x36, 0x60, 0x7f, 0x8a, 0xcf, 0xaf, 0xa8, 0xf3, 0xbb, 0x3a, 0x1f, 0x0f, 0x79, 0x4b,
	0x66, 0x2e, 0x68, 0x37, 0xed, 0xfa, 0x55, 0x5d, 0x15, 0xfc, 0x53, 0x28, 0xe4, 0x9d, 0x90, 0x18,
	0xed, 0xc5, 0xfe, 0xef, 0xa6, 0x46, 0x7f, 0x10, 0x0a, 0xdf, 0x84, 0xc4, 0x55, 0xa0, 0xdf, 0xef,
	0xf6, 0x27, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x7f, 0xd0, 0x2f, 0x5b, 0x02, 0x00, 0x00,
}
