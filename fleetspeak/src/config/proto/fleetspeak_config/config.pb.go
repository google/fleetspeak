// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: fleetspeak/src/config/proto/fleetspeak_config/config.proto

package fleetspeak_config

import (
	fleetspeak_components "github.com/google/fleetspeak/fleetspeak/src/server/components/proto/fleetspeak_components"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The configuration parameters needed by the configuration tool in order to
// create the artifacts needed to run a fleetspeak installation.
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An name for this installation, e.g. "Nascent" or "Nascent Staging".
	// Required.
	ConfigurationName string `protobuf:"bytes,1,opt,name=configuration_name,json=configurationName,proto3" json:"configuration_name,omitempty"`
	// A template for the components configuration file that will be generated.
	// The configuration tool will populate the https_config.key and
	// https_config.certificates fields based on the parameters below.
	ComponentsConfig *fleetspeak_components.Config `protobuf:"bytes,2,opt,name=components_config,json=componentsConfig,proto3" json:"components_config,omitempty"`
	// A file containing a PEM encoded certificate that clients should be
	// configured to trust. Typically a CA cert. If this file is not already
	// present, a 10 year self-signed CA certificate and associated private key
	// will be created.
	TrustedCertFile string `protobuf:"bytes,3,opt,name=trusted_cert_file,json=trustedCertFile,proto3" json:"trusted_cert_file,omitempty"`
	// A file containing the private key associated with trusted_cert_file, only
	// required if it is necessary to create server certificates.
	//
	// NOTE: Contains private key material. Only needs to be online when creating new
	// server certificates.
	TrustedCertKeyFile string `protobuf:"bytes,4,opt,name=trusted_cert_key_file,json=trustedCertKeyFile,proto3" json:"trusted_cert_key_file,omitempty"`
	// A file containing a PEM encoded certificate that the Fleetspeak server
	// should use to identify itself. If this file is not already present, a 1
	// year certificate signed directly using the contents of
	// trusted_cert_?(key_)file will be created.
	ServerCertFile string `protobuf:"bytes,5,opt,name=server_cert_file,json=serverCertFile,proto3" json:"server_cert_file,omitempty"`
	// A file containing the private key associated with
	// server_cert_file. Required.
	//
	// NOTE: Contains private key material.
	ServerCertKeyFile string `protobuf:"bytes,6,opt,name=server_cert_key_file,json=serverCertKeyFile,proto3" json:"server_cert_key_file,omitempty"`
	// Where to write the fleetspeak server component configuration file.
	//
	// NOTE: Result will contain private key material. Will only be needed by
	// fleetspeak servers.
	ServerComponentConfigurationFile string `protobuf:"bytes,7,opt,name=server_component_configuration_file,json=serverComponentConfigurationFile,proto3" json:"server_component_configuration_file,omitempty"`
	// How clients should find the fleetspeak server(s) used by this installation.
	//
	// Each entry should be of the form "<ip/hostname>:<port>". Note the clients
	// will not perform any intelligent load balancing, rather they will continue
	// to use the first option which works for them.
	//
	// If you are creating your own server certificates, they will need to cover
	// these addresses.
	PublicHostPort []string `protobuf:"bytes,8,rep,name=public_host_port,json=publicHostPort,proto3" json:"public_host_port,omitempty"`
	// If set, write a linux client configuration file for this installation.
	LinuxClientConfigurationFile string `protobuf:"bytes,9,opt,name=linux_client_configuration_file,json=linuxClientConfigurationFile,proto3" json:"linux_client_configuration_file,omitempty"`
	// If set, write a linux client configuration file for this installation.
	DarwinClientConfigurationFile string `protobuf:"bytes,10,opt,name=darwin_client_configuration_file,json=darwinClientConfigurationFile,proto3" json:"darwin_client_configuration_file,omitempty"`
	// If set, write a linux client configuration file for this installation.
	WindowsClientConfigurationFile string `protobuf:"bytes,11,opt,name=windows_client_configuration_file,json=windowsClientConfigurationFile,proto3" json:"windows_client_configuration_file,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleetspeak_src_config_proto_fleetspeak_config_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_fleetspeak_src_config_proto_fleetspeak_config_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_fleetspeak_src_config_proto_fleetspeak_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetConfigurationName() string {
	if x != nil {
		return x.ConfigurationName
	}
	return ""
}

func (x *Config) GetComponentsConfig() *fleetspeak_components.Config {
	if x != nil {
		return x.ComponentsConfig
	}
	return nil
}

func (x *Config) GetTrustedCertFile() string {
	if x != nil {
		return x.TrustedCertFile
	}
	return ""
}

func (x *Config) GetTrustedCertKeyFile() string {
	if x != nil {
		return x.TrustedCertKeyFile
	}
	return ""
}

func (x *Config) GetServerCertFile() string {
	if x != nil {
		return x.ServerCertFile
	}
	return ""
}

func (x *Config) GetServerCertKeyFile() string {
	if x != nil {
		return x.ServerCertKeyFile
	}
	return ""
}

func (x *Config) GetServerComponentConfigurationFile() string {
	if x != nil {
		return x.ServerComponentConfigurationFile
	}
	return ""
}

func (x *Config) GetPublicHostPort() []string {
	if x != nil {
		return x.PublicHostPort
	}
	return nil
}

func (x *Config) GetLinuxClientConfigurationFile() string {
	if x != nil {
		return x.LinuxClientConfigurationFile
	}
	return ""
}

func (x *Config) GetDarwinClientConfigurationFile() string {
	if x != nil {
		return x.DarwinClientConfigurationFile
	}
	return ""
}

func (x *Config) GetWindowsClientConfigurationFile() string {
	if x != nil {
		return x.WindowsClientConfigurationFile
	}
	return ""
}

var File_fleetspeak_src_config_proto_fleetspeak_config_config_proto protoreflect.FileDescriptor

var file_fleetspeak_src_config_proto_fleetspeak_config_config_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2f, 0x73, 0x72, 0x63,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a,
	0x49, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2f, 0x73, 0x72, 0x63, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65,
	0x61, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x05, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x15,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x65, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x23, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x6f, 0x73, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x45, 0x0a, 0x1f, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x6c, 0x69,
	0x6e, 0x75, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x64, 0x61,
	0x72, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x64, 0x61, 0x72, 0x77, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x21, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x4c,
	0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2f, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x73, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fleetspeak_src_config_proto_fleetspeak_config_config_proto_rawDescOnce sync.Once
	file_fleetspeak_src_config_proto_fleetspeak_config_config_proto_rawDescData = file_fleetspeak_src_config_proto_fleetspeak_config_config_proto_rawDesc
)

func file_fleetspeak_src_config_proto_fleetspeak_config_config_proto_rawDescGZIP() []byte {
	file_fleetspeak_src_config_proto_fleetspeak_config_config_proto_rawDescOnce.Do(func() {
		file_fleetspeak_src_config_proto_fleetspeak_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_fleetspeak_src_config_proto_fleetspeak_config_config_proto_rawDescData)
	})
	return file_fleetspeak_src_config_proto_fleetspeak_config_config_proto_rawDescData
}

var file_fleetspeak_src_config_proto_fleetspeak_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_fleetspeak_src_config_proto_fleetspeak_config_config_proto_goTypes = []interface{}{
	(*Config)(nil),                       // 0: fleetspeak.config.Config
	(*fleetspeak_components.Config)(nil), // 1: fleetspeak.components.Config
}
var file_fleetspeak_src_config_proto_fleetspeak_config_config_proto_depIdxs = []int32{
	1, // 0: fleetspeak.config.Config.components_config:type_name -> fleetspeak.components.Config
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_fleetspeak_src_config_proto_fleetspeak_config_config_proto_init() }
func file_fleetspeak_src_config_proto_fleetspeak_config_config_proto_init() {
	if File_fleetspeak_src_config_proto_fleetspeak_config_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fleetspeak_src_config_proto_fleetspeak_config_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fleetspeak_src_config_proto_fleetspeak_config_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fleetspeak_src_config_proto_fleetspeak_config_config_proto_goTypes,
		DependencyIndexes: file_fleetspeak_src_config_proto_fleetspeak_config_config_proto_depIdxs,
		MessageInfos:      file_fleetspeak_src_config_proto_fleetspeak_config_config_proto_msgTypes,
	}.Build()
	File_fleetspeak_src_config_proto_fleetspeak_config_config_proto = out.File
	file_fleetspeak_src_config_proto_fleetspeak_config_config_proto_rawDesc = nil
	file_fleetspeak_src_config_proto_fleetspeak_config_config_proto_goTypes = nil
	file_fleetspeak_src_config_proto_fleetspeak_config_config_proto_depIdxs = nil
}
